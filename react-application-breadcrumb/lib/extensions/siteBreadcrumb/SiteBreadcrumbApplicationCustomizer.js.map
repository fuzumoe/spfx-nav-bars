{"version":3,"sources":["extensions/siteBreadcrumb/SiteBreadcrumbApplicationCustomizer.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,6BAA+B;AAC/B,oCAAsC;AACtC,oDAAiD;AACjD,8DAAiD;AACjD,sEAIwC;AAExC,+CAAiD;AACjD,8DAAyD;AAGzD,IAAM,UAAU,GAAW,qCAAqC,CAAC;AAYjE,qFAAqF;AACrF;IACU,uDAAyE;IADnF;;IA6CA,CAAC;IAxCQ,oDAAM,GAAb;QACE,qBAAG,CAAC,IAAI,CAAC,UAAU,EAAE,iBAAe,OAAO,CAAC,KAAO,CAAC,CAAC;QAErD,oEAAoE;QACpE,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAElF,6DAA6D;QAC7D,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAE3B,MAAM,CAAC,OAAO,CAAC,OAAO,EAAQ,CAAC;IACjC,CAAC;IAEO,iEAAmB,GAA3B;QACE,4FAA4F;QAC5F,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,IAAI,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,OAAO,CAAC,qCAAe,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACtH,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,qCAAe,CAAC,GAAG,EAAE;gBAC/F,SAAS,EAAE,IAAI,CAAC,UAAU;aAC3B,CAAC,CAAC;YAEH,8EAA8E;YAC9E,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC;gBAC7B,OAAO,CAAC,KAAK,CAAC,sDAAsD,CAAC,CAAC;gBACtE,MAAM,CAAC;YACT,CAAC;YAED,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC,CAAC;gBACvC,IAAM,OAAO,GAA6C,KAAK,CAAC,aAAa,CAC3E,wBAAc,EACd;oBACE,OAAO,EAAE,IAAI,CAAC,OAAO;iBACtB,CACF,CAAC;gBACF,QAAQ,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC;YAC/D,CAAC;QACH,CAAC;IACH,CAAC;IAEO,wDAAU,GAAlB;QACE,OAAO,CAAC,GAAG,CAAC,8CAA8C,CAAC,CAAC;IAC9D,CAAC;IAvCD;QADC,qBAAQ;qEAWR;IA8BH,0CAAC;CA7CD,AA6CC,CA5CS,+CAAyB,GA4ClC;kBA7CoB,mCAAmC","file":"extensions/siteBreadcrumb/SiteBreadcrumbApplicationCustomizer.js","sourcesContent":["import * as React from \"react\";\nimport * as ReactDom from 'react-dom';\nimport { override } from '@microsoft/decorators';\nimport { Log } from '@microsoft/sp-core-library';\nimport {\n  BaseApplicationCustomizer,\n  PlaceholderContent,\n  PlaceholderName\n} from '@microsoft/sp-application-base';\n\nimport * as strings from 'siteBreadcrumbStrings';\nimport SiteBreadcrumb from './components/SiteBreadcrumb';\nimport { ISiteBreadcrumbProps } from './components/ISiteBreadcrumb';\n\nconst LOG_SOURCE: string = 'SiteBreadcrumbApplicationCustomizer';\n\n/**\n * If your command set uses the ClientSideComponentProperties JSON input,\n * it will be deserialized into the BaseExtension.properties object.\n * You can define an interface to describe it.\n */\nexport interface ISiteBreadcrumbApplicationCustomizerProperties {\n  // This is an example; replace with your own property\n  testMessage: string;\n}\n\n/** A Custom Action which can be run during execution of a Client Side Application */\nexport default class SiteBreadcrumbApplicationCustomizer\n  extends BaseApplicationCustomizer<ISiteBreadcrumbApplicationCustomizerProperties> {\n  private _headerPlaceholder: PlaceholderContent;\n\n  @override\n  public onInit(): Promise<void> {\n    Log.info(LOG_SOURCE, `Initialized ${strings.Title}`);\n\n    // Added to handle possible changes on the existence of placeholders\n    this.context.placeholderProvider.changedEvent.add(this, this._renderPlaceHolders);\n\n    // Call render method for generating the needed html elements\n    this._renderPlaceHolders();\n\n    return Promise.resolve<void>();\n  }\n\n  private _renderPlaceHolders(): void {\n    // Check if the header placeholder is already set and if the header placeholder is available\n    if (!this._headerPlaceholder && this.context.placeholderProvider.placeholderNames.indexOf(PlaceholderName.Top) !== -1) {\n      this._headerPlaceholder = this.context.placeholderProvider.tryCreateContent(PlaceholderName.Top, {\n        onDispose: this._onDispose\n      });\n\n      // The extension should not assume that the expected placeholder is available.\n      if (!this._headerPlaceholder) {\n        console.error('The expected placeholder (PageHeader) was not found.');\n        return;\n      }\n\n      if (this._headerPlaceholder.domElement) {\n        const element: React.ReactElement<ISiteBreadcrumbProps> = React.createElement(\n          SiteBreadcrumb,\n          {\n            context: this.context\n          }\n        );\n        ReactDom.render(element, this._headerPlaceholder.domElement);\n      }\n    }\n  }\n\n  private _onDispose(): void {\n    console.log('[Breadcrumb._onDispose] Disposed breadcrumb.');\n  }\n}\n"],"sourceRoot":"../../../src"}