// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../gd-sprest-def

declare module 'gd-sprest' {
    /**
        * Library
        */
    import { ContextInfo, List, Navigation, PeopleManager, PeoplePicker, ProfileLoader, Search, Site, SocialFeed, UserProfile, Utility, Web } from "gd-sprest/lib/types";
    export {
            ContextInfo, List, Navigation, PeopleManager, PeoplePicker,
            ProfileLoader, Search, Site, SocialFeed, UserProfile, Utility, Web
    }
    
    /**
        * Helper Class
        */
    import * as Helper from "gd-sprest/helper/types";
    export { Helper }
    
    /**
        * Library Components
        */
    import * as Lib from "gd-sprest/lib/types";
    export { Lib }
    
    /**
        * $REST Global Variable
        */
    export * from "gd-sprest/rest";
    
    /**
        * SharePoint Enumerator Types
        */
    import { SPTypes } from "gd-sprest/mapper/types";
    export { SPTypes }
    
    /**
        * Intellisense
        */
    import * as Types from "gd-sprest/intellisense";
    export { Types }
}

declare module 'gd-sprest/lib/types' {
    export * from "gd-sprest/lib/types/contextInfo";
    export * from "gd-sprest/lib/types/graph";
    export * from "gd-sprest/lib/types/list";
    export * from "gd-sprest/lib/types/navigation";
    export * from "gd-sprest/lib/types/peopleManager";
    export * from "gd-sprest/lib/types/peoplePicker";
    export * from "gd-sprest/lib/types/profileLoader";
    export * from "gd-sprest/lib/types/search";
    export * from "gd-sprest/lib/types/site";
    export * from "gd-sprest/lib/types/socialFeed";
    export * from "gd-sprest/lib/types/userProfile";
    export * from "gd-sprest/lib/types/utility";
    export * from "gd-sprest/lib/types/web";
}

declare module 'gd-sprest/helper/types' {
    import { Base, SP } from "gd-sprest-def";
    import { IApp } from "gd-sprest/helper/types/app";
    import { IDependencies } from "gd-sprest/helper/types/dependencies";
    import { IFieldSchemaXML } from "gd-sprest/helper/types/fieldSchemaXML";
    import { IJSLink } from "gd-sprest/helper/types/jslink";
    import { IRibbonLink, ISuiteBarLink, ILinkInfo } from "gd-sprest/helper/types/linkInfo";
    import { IListForm } from "gd-sprest/helper/types/listForm";
    import { IListFormField } from "gd-sprest/helper/types/listFormField";
    import { ILoader } from "gd-sprest/helper/types/loader";
    import { IRequest } from "gd-sprest/helper/types/methods";
    import { ISPComponents } from "gd-sprest/helper/types/sp";
    import { ISPConfig, ISPConfigProps, IFieldInfo } from "gd-sprest/helper/types/spCfg";
    import { ISPCfgFieldType, ISPCfgType } from "gd-sprest/helper/types/spCfgTypes";
    import { ITaxonomy } from "gd-sprest/helper/types/taxonomy";
    import { IWebPart } from "gd-sprest/helper/types/webpart";
    
    /**
        * Helper Library
        */
    export * from "gd-sprest/helper/types/app";
    export * from "gd-sprest/helper/types/dependencies";
    export * from "gd-sprest/helper/types/executor";
    export * from "gd-sprest/helper/types/fieldSchemaXML";
    export * from "gd-sprest/helper/types/jslink";
    export * from "gd-sprest/helper/types/linkInfo";
    export * from "gd-sprest/helper/types/listForm";
    export * from "gd-sprest/helper/types/listFormField";
    export * from "gd-sprest/helper/types/loader";
    export * from "gd-sprest/helper/types/methods";
    export * from "gd-sprest/helper/types/sp";
    export * from "gd-sprest/helper/types/spCfg";
    export * from "gd-sprest/helper/types/spCfgTypes";
    export * from "gd-sprest/helper/types/taxonomy";
    export * from "gd-sprest/helper/types/webpart";
    
    /**
        * Helper
        */
    export interface IHelper {
            /**
                * Helper classes for the app web
                */
            App: IApp;
    
            /**
                * Helper class to load the required SP scripts
                */
            Dependencies: IDependencies;
    
            /**
                * Method to create a document set item.
                */
            createDocSet: (name: string, listName: string, webUrl?: string) => PromiseLike<SP.ListItem>;
    
            /**
                * Executor
                */
            Executor<T = any>(methodParams: Array<T>, method: (param: T) => PromiseLike<any> | void, onExecuted?: (...args) => PromiseLike<any> | void);
    
            /**
                * Helper class for generating a field schema xml
                */
            FieldSchemaXML: (fieldInfo: IFieldInfo) => PromiseLike<string>;
    
            /**
                * Determines if the user has permissions, based on the permission kind value
                */
            hasPermissions(permissionMask: SP.BasePermissions, permissions: Array<number> | number): boolean;
    
            /**
                * Helper class for implementing JSLink solutions
                */
            JSLink: IJSLink;
    
            /**
                * Helper class for implementing custom list forms
                */
            ListForm: IListForm;
    
            /**
                * Helper class for implementing custom list forms
                */
            ListFormField: IListFormField;
    
            /**
                * Helper class for waiting until the core SP scripts are loaded
                */
            Loader: ILoader;
    
            /**
                * Helper method to convert a json string to a base object
                * This will require you to use the stringify method of the base object.
                */
            parse<T = Base.IBaseResult>(jsonString: string): T;
    
            /**
                * Helper method to execute an XMLHttpRequest
                */
            request(props: IRequest): PromiseLike<any>;
    
            /**
                * Helper class for adding links to the top ribbon bar
                */
            RibbonLink: (props: ILinkInfo) => HTMLAnchorElement;
    
            /**
                * SharePoint Core Library Components
                */
            SP: ISPComponents;
    
            /**
                * The field configuration types
                */
            SPCfgFieldType: ISPCfgFieldType;
    
            /**
                * The configuration types
                */
            SPCfgType: ISPCfgType;
    
            /**
                * Helper class for automating SharePoint assets
                */
            SPConfig: (cfg: ISPConfigProps, webUrl?: string) => ISPConfig;
    
            /**
                * Helper class for adding links to the suite bar
                */
            SuiteBarLink: (props: ILinkInfo) => HTMLAnchorElement;
    
            /**
                * Helper class for getting information from the taxonomy term store
                */
            Taxonomy: ITaxonomy;
    
            /**
                * Helper class for creating modern webparts in SharePoint 2013+ environments
                */
            WebPart: IWebPart;
    }
}

declare module 'gd-sprest/rest' {
    import { Base, SP } from "gd-sprest-def";
    import { IHelper } from "gd-sprest/helper/types";
    import * as LibTypes from "gd-sprest/lib/types";
    
    /**
        * SharePoint REST Library
        */
    export const $REST: IREST;
    
    /**
        * SharePoint REST Library
        */
    export interface IREST {
            /**
                * The version number of the library.
                */
            __ver: number;
    
            /**
                * Use this api to get the app context information of a site.
                */
            AppContext: (siteUrl: string) => Base.IBaseExecution;
    
            /**
                * A reference to the _spPageContextInfo global variable.
                */
            ContextInfo: LibTypes.IContextInformation;
    
            /**
                * False by default.
                */
            DefaultRequestToHostFl: boolean;
    
            /**
                * Use this api to interact with the Graph API. (Still In Development)
                */
            Graph: LibTypes.IGraph;
    
            /**
                * Helper methods.
                */
            Helper: IHelper;
    
            /**
                * Use this api to interact with SharePoint lists and libraries.
                */
            List: LibTypes.IList;
    
            /**
                * Use this api to get the list name by its entity name.
                * @param props - The list entity request properties.
                */
            ListByEntityName(props: LibTypes.IListEntityProps): SP.IList;
    
            /**
                * Use this api to get the list data.
                * @param listFullUrl - The absolute url of the list.
                * @param parameters - The optional list data parameters.
                */
            ListDataAsStream: (listFullUrl: string, parameters?: SP.RenderListDataParameters) => Base.IBaseExecution<LibTypes.IListDataStream>
    
            /**
                * Use this api to interact with SharePoint navigation.
                */
            Navigation: LibTypes.INavigation;
    
            /**
                * Use this api to interact with SharePoint user profiles.
                * @param targetInfo - (Optional) The target information.
                */
            PeopleManager: LibTypes.IPeopleManager;
    
            /**
                * Use this api to search for users.
                * @param settings - The search settings.
                */
            PeoplePicker: LibTypes.IPeoplePicker;
    
            /**
                * Use this api to interact with the user profile loader.
                * @param targetInfo - (Optional) The target information.
                */
            ProfileLoader: LibTypes.IProfileLoader;
    
            /**
                * Use this api to get a remote web.
                * @param requestUrl - The absolute url of the remote web.
                */
            RemoteWeb: (requestUrl?: string) => Base.IBaseExecution<SP.RemoteWeb>;
    
            /**
                * Use this api to interact with the SharePoint search service.
                * @param url - The optional url to execute the search against.
                * @param settings - The search settings.
                */
            Search: LibTypes.ISearch;
    
            /**
                * Use this api to interact with a SharePoint site collection.
                */
            Site: LibTypes.ISite;
    
            /**
                * Use this api to see if a site collection exists.
                * @param url - The absolute url of the site collection.
                */
            SiteExists: (url: string) => Base.IBaseExecution<LibTypes.ISiteExists>;
    
            /**
                * Use this api to get the url of a site, by its id.
                * @param id - The site id.
                */
            SiteUrl: (id: string) => Base.IBaseExecution<LibTypes.ISiteUrl>;
    
            /**
                * Use this api to interact with the current user's social profile.
                */
            SocialFeed: LibTypes.ISocialFeed;
    
            /**
                * The SharePoint enumerator types.
                */
            SPTypes;
    
            /**
                * Use this api to interact with the current user's profile.
                */
            UserProfile: LibTypes.IUserProfile;
    
            /**
                * Use this api to interact with the available utility methods.
                */
            Utility: LibTypes.IUtility;
    
            /**
                * Use this api to interact with a SharePoint web.
                */
            Web: LibTypes.IWeb;
    }
}

declare module 'gd-sprest/mapper/types' {
    import * as SPTypes from "gd-sprest/mapper/types/sptypes";
    export {
        SPTypes
    }
}

declare module 'gd-sprest/intellisense' {
    export * from "gd-sprest-def";
    export * from "gd-sprest/intellisense/graph";
    export * from "gd-sprest/intellisense/peoplePicker";
    export * from "gd-sprest/intellisense/utility";
}

declare module 'gd-sprest/lib/types/contextInfo' {
    import { Base, SP } from "gd-sprest-def";
    
    /**
        * Context Information
        */
    export const ContextInfo: IContextInformation;
    
    /**
        * Context Information
        */
    export interface IContextInformation {
    
            /** AAD Instance Url */
            aadInstanceUrl: string;
    
            /** AAD Tenant Id */
            aadTenantId: string;
    
            /** Alerts Enabled */
            alertsEnabled: boolean;
    
            /** Allow Silverlight Prompt */
            allowSilverlightPrompt: boolean;
    
            /** Block Downloads Experience Enabled */
            blockDownloadsExperienceEnabled: boolean;
    
            /** Can User Create Microsoft Form */
            canUserCreateMicrosoftForm: boolean;
    
            /** Can User Create Visio Drawing */
            canUserCreateVisioDrawing: boolean;
    
            /** CDN Prefix */
            cdnPrefix: string;
    
            /** Client Server Time Delta */
            clientServerTimeDelta: number;
    
            /** Correlation ID */
            CorrelationId: string;
    
            /** Cross Domain Photos Enabled */
            crossDomainPhotosEnabled: boolean;
    
            /** Current Culture LCID */
            currentCultureLCID: string;
    
            /** Current Culture Name */
            currentCultureName: string;
    
            /** Current Language */
            currentLanguage: string;
    
            /** Current UI Culture Name */
            currentUICultureName: string;
    
            /** Department ID */
            departmentId: string;
    
            /** Design Package ID */
            DesignPackageId: string;
    
            /** Disable App Views */
            disableAppViews: boolean;
    
            /** Disable Flows */
            disableFlows: boolean;
    
            /** Document */
            document: HTMLDocument;
    
            /** Environment */
            env: string;
    
            /** True if the _spPageContextInfo object exists, flase otherwise. */
            existsFl: boolean;
    
            /** Farm Label */
            farmLabel: string;
    
            /** FID */
            fid: string;
    
            /** Form Digest Timeout Seconds */
            formDigestTimeoutSeconds: number;
    
            /** Form Digest Value */
            formDigestValue: string;
    
            /** Group Color */
            groupColor: string;
    
            /** Group Has Homepage */
            groupHasHomepage: boolean;
    
            /** Group ID */
            groupId: string;
    
            /** Group Type */
            groupType: string;
    
            /** Guests Enabled */
            guestsEnabled: boolean;
    
            /** Has Manage Web Permissions */
            hasManageWebPermissions: boolean;
    
            /** Has Pending Web Template Extension */
            hasPendingWebTemplateExtension: boolean;
    
            /** Hide Sync Button On ODB */
            hideSyncButtonOnODB: boolean;
    
            /** Hub Site ID */
            hubSiteId: boolean;
    
            /** IDLE Session Sign Out Enabled */
            idleSessionSignOutEnabled: boolean;
    
            /** Is Anonymous Guest User */
            isAnonymousGuestUser: boolean;
    
            /** Is App Web */
            isAppWeb: boolean;
    
            /** Is Email Authentication Guest User */
            isEmailAuthenticatinoGuesUser: boolean;
    
            /** Is External Guest User */
            isExternalGuestUser: boolean;
    
            /** Is Hub Site */
            isHubSite: boolean;
    
            /** Is Multi Geo Tenant */
            isMultiGeoTenant: boolean;
    
            /** Is No-Script Enabled */
            isNoScriptEnabled: boolean;
    
            /** Is Site Administrator */
            isSiteAdmin: boolean;
    
            /** Is SharePoint Online */
            isSPO: boolean;
    
            /** Is Tenant Development Site */
            isTenantDevSite: boolean;
    
            /** Is Web Welcome Page */
            isWebWelcomePage: boolean;
    
            /** Layouts Url */
            layoutsUrl: string;
    
            /** List Base Template */
            listBaseTemplate: number;
    
            /** List Id */
            listId: string;
    
            /** List Permissions Mask */
            listPermMask: SP.BasePermissions;
    
            /** List Title */
            listTitle: string;
    
            /** List Url */
            listUrl: string;
    
            /** Maximum File Size */
            maximumFileSize: number;
    
            /** NID */
            nid: string;
    
            /** Open in Client */
            openInClient: boolean;
    
            /** Page Item Id */
            pageItemId: number;
    
            /** Page List Id */
            pageListId: string;
    
            /** Page Permissions Mask */
            pagePermMask: SP.BasePermissions;
    
            /** Page Personalization Scope */
            pagePersonalizationScope: number;
    
            /** Prefer User Time Zone */
            preferUserTimeZone: boolean;
    
            /** Preview Features Enabled */
            PreviewFeaturesEnabled: boolean;
    
            /** Profile Url */
            profileUrl: string;
    
            /** Publishing Feature On */
            PublishingFeatureOn: boolean;
    
            /** Recycle Bin Item Count */
            RecycleBinItemCount: number;
    
            /** Server Redirected Url */
            serverRedirectedUrl: string;
    
            /** Server Request Path */
            serverRequestPath: string;
    
            /** Server Time */
            serverTime: string;
    
            /** Show NGSC Dialog for Sync on ODB */
            showNGSCDialogForSyncOnODB: boolean;
    
            /** Show NGSC Dialog for Sync on TS */
            showNGSCDialogForSyncOnTS: boolean;
    
            /** Site Absolute Url */
            siteAbsoluteUrl: string;
    
            /** Site Classification */
            siteClassification: string;
    
            /** Site Client Tag */
            siteClientTag: string;
    
            /** Site Color */
            siteColor: string;
    
            /** Site ID */
            siteId: string;
    
            /** Site Pages Enabled */
            sitePagesEnabled: boolean;
    
            /** Site Server Relative Url */
            siteServerRelativeUrl: string;
    
            /** Site Subscription ID */
            siteSubscriptionId: string;
    
            /** Support Percent Store Page */
            supportPercentStorePage: boolean;
    
            /** Support Pound Store Path */
            supportPoundStorePath: boolean;
    
            /** System User Key */
            systemUserKey: string;
    
            /** Tenant App Version */
            tenantAppVersion: string;
    
            /** Theme Cache Token */
            themeCacheToken: string;
    
            /** Theme CSS Folder Url */
            themeCssFolderUrl: string;
    
            /** Theme Image File Names */
            themeImageFileNames: any;
    
            /** Update From Digest Page Loaded */
            updateFromDigestPageLoaded: Date;
    
            /** User Display Name */
            userDisplayName: string;
    
            /** User EMail */
            userEmail: string;
    
            /** User First Day of Week */
            userFirstDayOfWeek: any;
    
            /** User Id */
            userId: number;
    
            /** User Login Name */
            userLoginName: string;
    
            /** User Time 24 */
            userTime24: boolean;
    
            /** User Time Zone Data */
            userTimeZoneData: any;
    
            /** View ID */
            viewId: string;
    
            /** View Only Experience Enabled */
            viewOnlyExperienceEnabled: boolean;
    
            /** Web Absolute Url */
            webAbsoluteUrl: string;
    
            /** Web Description */
            webDescription: string;
    
            /** Web First Day of Week */
            webFirstDayOfWeek: number;
    
            /** Web ID */
            webId: string;
    
            /** Web Language */
            webLanguage: number;
    
            /** Web Logo Url */
            webLogoUrl: string;
    
            /** Web Permissions Mask */
            webPermMask: SP.BasePermissions;
    
            /** Web Server Relative Url */
            webServerRelativeUrl: string;
    
            /** Web Template */
            webTemplate: string;
    
            /** Web Time 24 */
            webTime24: boolean;
    
            /** Web Title */
            webTitle: string;
    
            /** Web UI Version */
            webUIVersion: number;
    
            /** Window */
            window: {
                    $REST: any;
                    addEventListener: any;
                    clearInterval: any;
                    document: HTMLDocument;
                    setInterval: any;
                    SP: any;
                    SPClientTemplates: any;
            };
    
    
            /**
                * Method to generate a guid.
                */
            generateGUID: () => string;
    
            /**
                * Method to get the web context information.
                * @param url - The relative url of the web.
                */
            getWeb(url: string): Base.IBaseExecution<{ GetContextWebInformation: SP.ContextWebInformation }>;
    
            /** The page context object from an SPFX project. */
            setPageContext(spfxPageContext: any);
    }
}

declare module 'gd-sprest/lib/types/graph' {
    import * as Types from "gd-sprest/intellisense";
    import { ITargetInfo } from "gd-sprest/utils/types";
    
    /**
        * Graph
        */
    export const Graph: IGraph;
    
    /**
        * Graph
        */
    export interface IGraph {
            /**
                * Creates an instance of the graph library.
                * @param accessToken - The access token for the graph api request.
                * @param version - The version of the graph to target.
                */
            (accessToken: string, version?: string): Types.IGraph;
    
            /**
                * Method to get the access token from a classic page.
                */
            getAccessToken(): Promise<Types.IGraphToken>;
    }
}

declare module 'gd-sprest/lib/types/list' {
    import { Base, SP } from "gd-sprest-def";
    import { ITargetInfoProps } from "gd-sprest/utils/types/targetInfo";
    
    /**
        * List
        */
    export const List: IList;
    
    /**
        * List
        */
    export interface IList {
            /**
                * Creates an instance of the library.
                * @param listName - The name of the list.
                * @param targetInfo - (Optional) The target information.
                */
            (listName: string, targetInfo?: ITargetInfoProps): SP.IList;
    
            /**
                * A static method to get the list by the entity name.
                * @param props - The list entity request properties.
                */
            getByEntityName(props: IListEntityProps): SP.IList;
    
            /**
                * A static method to get the list data from the SP.List.GetListAsDataStream endpoint.
                * @param listFullUrl - The absolute url of the list.
                * @param parameters - The optional list data parameters.
                */
            getDataAsStream(listFullUrl: string, parameters?: any): Base.IBaseExecution<IListDataStream>;
    }
    
    /**
        * List Data Stream
        */
    export interface IListDataStream<RowProps = SP.ListItem> {
            FilterFields?: string;
            FilterLink: string;
            FirstRow: number;
            FolderPermissions: string;
            ForceNoHierarchy: string;
            HierarchyHasIndention: string;
            LastRow: number;
            Row: Array<RowProps>;
            RowLimit: number;
    }
    
    /**
        * List Entity Properties
        */
    export interface IListEntityProps {
            /** The callback method. */
            callback?: (list: SP.List) => void;
    
            /** The list entity name. */
            name: string;
    
            /** The target information to pass to the web request. */
            targetInfo?: ITargetInfoProps;
    
            /** The relative url of the web containing the list. */
            url?: string;
    }
}

declare module 'gd-sprest/lib/types/navigation' {
    import { Microsoft } from "gd-sprest-def";
    import { ITargetInfoProps } from "gd-sprest/utils/types";
    
    /**
        * INavigation
        */
    export const Navigation: INavigation;
    
    /**
        * Navigation
        */
    export interface INavigation {
            /**
                * Creates an instance of the navigation library.
                * @param url - (Optional) The web url.
                * @param targetInfo - (Optional) The target information.
                */
            (url?: string, targetInfo?: ITargetInfoProps): Microsoft.SharePoint.Navigation.REST.INavigationServiceRest;
    }
}

declare module 'gd-sprest/lib/types/peopleManager' {
    import { SP } from "gd-sprest-def";
    import { ITargetInfoProps } from "gd-sprest/utils/types";
    
    /**
        * People Manager
        */
    export const PeopleManager: IPeopleManager;
    
    /**
        * People Manager
        */
    export interface IPeopleManager {
            /**
                * Creates an instance of the people manager library.
                * @param targetInfo - (Optional) The target information.
                */
            (targetInfo?: ITargetInfoProps): SP.UserProfiles.IPeopleManager;
    }
}

declare module 'gd-sprest/lib/types/peoplePicker' {
    import * as Types from "gd-sprest/intellisense";
    import { ITargetInfoProps } from "gd-sprest/utils/types";
    
    /**
        * People Picker
        */
    export const PeoplePicker: IPeoplePicker;
    
    /**
        * People Picker
        */
    export interface IPeoplePicker {
            /**
                * Creates an instance of the people picker library.
                * @param targetInfo - (Optional) The target information.
                */
            (targetInfo?: ITargetInfoProps): Types.IPeoplePicker;
    }
}

declare module 'gd-sprest/lib/types/profileLoader' {
    import { SP } from "gd-sprest-def";
    import { ITargetInfoProps } from "gd-sprest/utils/types";
    
    /**
        * Profile Loader
        */
    export const ProfileLoader: IProfileLoader;
    
    /**
        * Profile Loader
        */
    export interface IProfileLoader {
            /**
                * Creates an instance of the profile loader library.
                * @param targetInfo - (Optional) The target information.
                */
            (targetInfo?: ITargetInfoProps): SP.UserProfiles.IProfileLoader;
    }
}

declare module 'gd-sprest/lib/types/search' {
    import { Base, Microsoft, SP } from "gd-sprest-def";
    import { ITargetInfoProps } from "gd-sprest/utils/types/targetInfo";
    
    /**
        * Search
        */
    export const Search: ISearch;
    
    /**
        * Search
        */
    export interface ISearch {
            /**
                * Creates an instance of the search library.
                * @param url - The optional url to execute the search against.
                * @param targetInfo - The target information.
                */
            (url?: string, targetInfo?: ITargetInfoProps): Microsoft.Office.Server.Search.REST.ISearchService;
    
            /**
                * Method to get the app context information.
                * @param siteUrl - The absolute url of the site.
                */
            getAppContext(siteUrl: string): Base.IBaseExecution;
    
            /**
                * Method to get the query from the search parameters.
                * @param parameters - The search parameters.
                */
            getQuery: (parameters: Microsoft.Office.Server.Search.REST.SearchRequest /* | Microsoft.Office.Server.Search.REST.SearchSuggestion*/) => Array<string>;
    
            /**
                * Method to get the url of a site, by its id.
                * @param id - The site id.
                */
            getUrlById(id: string): Base.IBaseExecution<{ GetUrlById: string }>;
    }
}

declare module 'gd-sprest/lib/types/site' {
    import { Base, SP } from "gd-sprest-def";
    import { ITargetInfoProps } from "gd-sprest/utils/types/targetInfo";
    
    /**
        * Site
        */
    export const Site: ISite;
    
    /**
        * Site
        */
    export interface ISite {
            /**
                * Creates an instance of the site library.
                * @param url - (Optional) The site url.
                * @param targetInfo - (Optional) The target information.
                */
            (url?: string, targetInfo?: ITargetInfoProps): SP.ISite;
    
            /**
                * Method to check if a site collection exists.
                * @param url - The absolute url of the site collection.
                */
            exists(url: string): Base.IBaseExecution<ISiteExists>;
    
            /**
                * Method to get the app context information.
                * @param siteUrl - The absolute url of the site.
                */
            getAppContext(siteUrl: string): Base.IBaseExecution;
    
            /**
                * Method to get the url of a site, by its id.
                * @param id - The site id.
                */
            getUrlById(id: string): Base.IBaseExecution<ISiteUrl>;
    }
    
    /**
        * Site Exists
        */
    export interface ISiteExists {
            /** True if the site collection exists, false otherwise. */
            Exists: boolean;
    }
    
    /**
        * Site Url
        */
    export interface ISiteUrl {
            /** The site url. */
            GetUrlById: string;
    }
}

declare module 'gd-sprest/lib/types/socialFeed' {
    import { Base, SP } from "gd-sprest-def";
    import { ITargetInfoProps } from "gd-sprest/utils/types";
    
    /**
        * Social Feed
        */
    export const SocialFeed: ISocialFeed;
    
    /**
        * Social Feed
        */
    export interface ISocialFeed {
            /**
                * Creates an instance of the social feed library.
                * @param targetInfo - (Optional) The target information.
                */
            (targetInfo?: ITargetInfoProps): SP.Social.ISocialRestThread;
    
            /**
                * Posts to a feed.
                * @param accountName - The account name to post to.
                * @param postInfo - The post information.
                */
            postToFeed(accountName: string, postInfo: SP.Social.SocialPostCreationData): Base.IBaseExecution<SP.Social.SocialRestThread>;
    
            /**
                * Post to the current user's feed.
                * @param postInfo - The post information.
                */
            postToMyFeed(postInfo: SP.Social.SocialPostCreationData): Base.IBaseExecution<SP.Social.SocialRestThread>;
    }
}

declare module 'gd-sprest/lib/types/userProfile' {
    import { SP } from "gd-sprest-def";
    import { ITargetInfoProps } from "gd-sprest/utils/types";
    
    /**
        * User Profile
        */
    export const UserProfile: IUserProfile;
    
    /**
        * User Profile
        */
    export interface IUserProfile {
            /**
                * Creates an instance of the user profile library.
                * @param targetInfo - (Optional) The target information.
                */
            (targetInfo?: ITargetInfoProps): SP.UserProfiles.IProfileLoader;
    }
}

declare module 'gd-sprest/lib/types/utility' {
    import * as Types from "gd-sprest/intellisense";
    import { ITargetInfoProps } from "gd-sprest/utils/types";
    
    /**
        * Utility
        */
    export const Utility: IUtility;
    
    /**
        * Utility
        */
    export interface IUtility {
            /**
                * Creates an instance of the utility library.
                * @param url - (Optional) The web url.
                * @param targetInfo - (Optional) The target information.
                */
            (url?: string, targetInfo?: ITargetInfoProps): Types.IUtility;
    }
}

declare module 'gd-sprest/lib/types/web' {
    import { Base, SP } from "gd-sprest-def";
    import { ITargetInfoProps } from "gd-sprest/utils/types/targetInfo";
    
    /**
        * Web
        */
    export const Web: IWeb;
    
    /**
        * Web
        */
    export interface IWeb {
            /**
                * Creates an instance of the web library.
                * @param url - (Optional) The web url.
                * @param targetInfo - (Optional) The target information.
                */
            (url?: string, targetInfo?: ITargetInfoProps): SP.IWeb;
    
            /**
                * Method to get a remote web.
                * @param requestUrl - The absolute url of the remote web.
                */
            getRemoteWeb(requestUrl: string): Base.IBaseExecution<SP.RemoteWeb>;
    }
}

declare module 'gd-sprest/helper/types/app' {
    import { SP } from "gd-sprest-def";
    
    /** App */
    export const App: IApp;
    
    /**
        * App Helper Methods
        */
    export interface IApp {
            /**
                * Method to copy a file from the app web to the host web.
                * @param srcFileUrl - The source file url, relative to the app web.
                * @param dstFolder - The destination folder.
                * @param overwriteFl - Flag to overwrite the file in the destination folder, if it already exists. This value is falst by default.
                * @param rootWebFl - Flag to target the root web of the site collection, otherwise the host web.
                */
            copyFileToHostWeb(srcFileUrl: string, dstFolder: SP.IFolder, overwriteFl?: boolean, rootWebFl?: boolean): PromiseLike<{ file: SP.IFile, folder: SP.IFolder }>;
    
            /**
                * Method to copy a file from the app web to the host web.
                * @param srcFileUrl - The source file url, relative to the app web.
                * @param dstFolderUrl - The destination folder url, relative to the host web.
                * @param overwriteFl - Flag to overwrite the file in the destination folder, if it already exists. This value is falst by default.
                * @param rootWebFl - Flag to target the root web of the site collection, otherwise the host web.
                */
            copyFileToHostWeb(srcFileUrl: string, dstFolderUrl: string, overwriteFl?: boolean, rootWebFl?: boolean): PromiseLike<{ file: SP.IFile, folder: SP.IFolder }>;
    
            /**
                * Method to copy a file from the app web to the host web
                * @param fileUrls - An array of source file urls, relative to the app web.
                * @param folderUrls - An array of destination folder urls, relative to the host web.
                * @param rootWebFl - Flag to target the root web of the site collection, otherwise the host web.
                */
            copyFilesToHostWeb(fileUrls: Array<string>, folderUrls: Array<string>, overwriteFl?: boolean, rootWebFl?: boolean): PromiseLike<{ files: Array<SP.IFile>, folders: Array<SP.IFolder> }>;
    
            /**
                * Method to create sub-folders.
                * @param folder - The app web relative url to the source file.
                * @param subFolderUrl - The host web relative url of the destination folder.
                */
            createSubFolders(folder: SP.IFolder, subFolderUrl: string): PromiseLike<SP.IFolder>;
    
            /**
                * Method to get the file content.
                * @param web - The web containing the files.
                * @param fileUrls - An array of file urls, relative to the web.
                * @param createFl - Flag to create the folder, if it doesn't exist.
                */
            getFolder(web: SP.IWeb | SP.IWeb, folderUrl: string, createFl?: boolean): PromiseLike<SP.IFolder>;
    
            /**
                * Method to remove empty folders
                * @param web - The web containing the files.
                * @param folderUrls - An array of folder urls, relative to the web.
                */
            removeEmptyFolders(web: SP.IWeb, folderUrls: Array<string>): PromiseLike<void>;
    
            /**
                * Method to remove files from a web.
                * @param web - The web containing the files.
                * @param fileUrl - The file url, relative to the web.
                */
            removeFile(web: SP.IWeb, fileUrl: string): PromiseLike<void>;
    
            /**
                * Method to remove files from a web.
                * @param web - The web containing the files.
                * @param fileUrls - An array of file urls, relative to the web.
                */
            removeFiles(web: SP.IWeb, fileUrls: Array<string>): PromiseLike<void>;
    }
}

declare module 'gd-sprest/helper/types/dependencies' {
    /**
        * Dependencies
        */
    export const Dependencies: IDependencies;
    
    /**
        * Dependencies
        */
    export interface IDependencies {
            /**
                * Constructor
                * @param callback - The method to execute after the dependencies are loaded.
                */
            constructor(callback: (...args) => void);
    
            /** The maximum amount of time to wait for the scripts to be loaded. */
            MAX_WAIT: number;
    
            /** Flag to determine if the page context information exists */
            pageContextExistsFl: boolean;
    
            /** The script file names to load. */
            SCRIPTS: Array<string>;
    
            /**
                * Method to ensure the SP classes are loaded
                */
            loadDependencies();
    
            /**
                * Method to wait for the page context to be loaded
                */
            waitForPageContext();
    }
}

declare module 'gd-sprest/helper/types/fieldSchemaXML' {
    /**
        * Field Schema XML
        */
    import { IFieldInfo } from "gd-sprest/helper/types";
    
    /**
        * Field Schema XML
        */
    export const FieldSchemaXML: (fieldInfo: IFieldInfo) => PromiseLike<string>;
    
    /**
        * Field Schema XML
        */
    export interface IFieldSchemaXML {
            /** Creates the suitebar link */
            new(fieldInfo: IFieldInfo): PromiseLike<string>;
    }
}

declare module 'gd-sprest/helper/types/jslink' {
    /**
        * JSLink
        */
    export const JSLink: IJSLink;
    
    /**
        * JSLink
        */
    export interface IJSLink {
            /**
                * Internal field to method mapper
                */
            _fieldToMethodMapper: any;
    
            /**
                * Internal field used by the hideField method.
                */
            _hideEventFl: boolean;
    
            /**
                * Disables edit for the specified field.
                * @param ctx - The client context.
                * @param field - The field to disable edit.
                * @param requireValueFl - Flag to only disable the field, if a value exists.
                */
            disableEdit(ctx: any, field: any, requireValueFl?: boolean): string;
    
            /**
                * Disable quick edit for the specified field.
                * @param ctx - The client context.
                * @param field - The field to disable edit.
                */
            disableQuickEdit(ctx: any, field: any);
    
            /**
                * Returns the list view.
                * @param ctx - The client context.
                */
            getListView(ctx: any);
    
            /**
                * Returns the list view items.
                * @param ctx - The client context.
                */
            getListViewItems(ctx: any);
    
            /**
                * Returns the selected list view items
                */
            getListViewSelectedItems();
    
            /**
                * Returns the webpart containing the JSLink field/form/view.
                * @param ctx - The client context.
                */
            getWebPart(ctx);
    
            /**
                * Hides the specified field.
                * @param ctx - The client context.
                * @param field - The field to hide.
                */
            hideField(ctx: any, field: any);
    
            /**
                * Registers the JSLink configuration.
                * @param cfg - The JSLink configuration.
                */
            register(cfg: IJSLinkCfg);
    
            /**
                * Removes the field and html from the page.
                * @param ctx - The client context.
                * @param field - The field to remove.
                */
            removeField(ctx: any, field: any);
    
            /**
                * Method to render the default html for a field.
                * @param ctx - The client context.
                * @param field - The form field.
                * @param formType - The form type. (Display, Edit, New or View)
                */
            renderField(ctx, field, formType?: number);
    }
    
    /**
        * JSLink Configuration
        */
    export interface IJSLinkCfg {
            /** The base view id. */
            BaseViewID?: number | string;
    
            /** The list template type. */
            ListTemplateType?: number;
    
            /** The post render event. */
            OnPostRender?: any;
    
            /** The pre render event. */
            OnPreRender?: any;
    
            /** The JSLink template overrides. */
            Templates?: IJSLinkCfgTemplate;
    }
    /**
        * JSLink Field Configuration
        */
    export interface IJSLinkCfgField {
            DisplayForm?: any;
            EditForm?: any;
            NewForm?: any;
            View?: any;
    }
    
    /**
        * JSLink Templates
        */
    export interface IJSLinkCfgTemplate {
            Body?: any;
            Footer?: any;
            Fields?: { [key: string]: IJSLinkCfgField };
            Group?: any;
            Header?: any;
            Item?: any;
            OnPostRender?: any;
            OnPreRender?: any;
    }
}

declare module 'gd-sprest/helper/types/linkInfo' {
    /**
        * Ribbon Link
        */
    export const RibbonLink: (props: ILinkInfo) => HTMLAnchorElement;
    
    /**
        * Suitebar Link
        */
    export const SuiteBarLink: (props: ILinkInfo) => HTMLAnchorElement;
    
    /**
     * Link Information
     */
    export interface ILinkInfo {
            /** True to append the link at the end of the list. */
            appendFl?: boolean;
    
            /** The link class name */
            className?: string;
    
            /** The link url */
            href?: string;
    
            /** The link id */
            id: string;
    
            /** The link click event */
            onClick?: (ev?: MouseEvent) => void;
    
            /** The link title */
            title: string;
    }
    
    /**
        * Ribbon Link
        */
    export interface IRibbonLink {
            /** Creates the ribbon link */
            new(props: ILinkInfo): HTMLAnchorElement;
    }
    
    /**
        * Suitebar Link
        */
    export interface ISuiteBarLink {
            /** Creates the suitebar link */
            new(props: ILinkInfo): HTMLAnchorElement;
    }
}

declare module 'gd-sprest/helper/types/listForm' {
    import { IODataQuery, SP } from "gd-sprest-def";
    import * as Types from "gd-sprest/intellisense";
    
    /**
        * List Form
        */
    export const ListForm: IListForm;
    
    /**
        * List Form
        */
    export interface IListForm {
            /**
                * Creates an instance of the list form
                * @param props - The list form properties.
                */
            create(props: IListFormProps): PromiseLike<IListFormResult>;
    
            /**
                * Method to generate the odata query for the list item.
                */
            generateODataQuery(info: IListFormResult, loadAttachments?: boolean): IODataQuery;
    
            /**
                * Method to load the item attachments
                * @param info - The list form information.
             */
            loadAttachments(info: IListFormProps): PromiseLike<Array<SP.Attachment>>
    
            /**
                * Method to refresh the item.
                * @param info - The list form information.
                */
            refreshItem(info: IListFormResult): PromiseLike<IListFormResult>;
    
            /**
                * Method to remove attachment from an item.
                */
            removeAttachment(info: IListFormResult, fileName: string): PromiseLike<IListFormResult>;
    
            /**
                * Method to save attachments to the item.
                * @param info - The list form information.
                * @param attachmentInfo - The attachment files to add.
                */
            saveAttachments(info: IListFormProps, attachmentInfo: Array<IListFormAttachmentInfo>): PromiseLike<Array<SP.Attachment>>;
    
            /**
                * Method to save the item.
                * @param info - The list form information.
                * @param itemValues - The list item values.
                */
            saveItem(info: IListFormResult, formValues: any): PromiseLike<IListFormResult>;
    
            /**
                * Method to show the file dialog.
                * @param info - The list form information.
                * @param onSave - The save event triggered when a file is uploaded to the item.
                */
            showFileDialog(): PromiseLike<IListFormAttachmentInfo>;
    
            /**
                * Method to show the file dialog.
                * @param info - The list form information.
                * @param onSave - The save event triggered when a file is uploaded to the item.
                */
            showFileDialog(info: IListFormResult, onSave?: (IListFormAttachmentInfo) => void): PromiseLike<IListFormResult>;
    }
    
    /**
        * List Form Attachment Information
        */
    export interface IListFormAttachmentInfo {
            /** The file content */
            data: any;
    
            /** The name of the file */
            name: string;
    }
    
    /**
        * List Form Cache
        */
    export interface IListFormCache {
            ct: string;
            fields: string;
            list: string;
    }
    
    /**
        * List Form Display
        */
    export interface IListFormDisplay {
            /**
                * Method to get the fields
                */
            getFields(): Array<HTMLDivElement>;
    }
    
    /**
        * List Form Display Properties
        */
    export interface IListFormDisplayProps {
            /** The element to render the form to. */
            el: Element;
    
            /** The fields to exclude from the form. */
            excludeFields?: Array<string>;
    
            /** The fields to include in the form. */
            includeFields?: Array<string>;
    
            /** The list form information. */
            info: IListFormResult;
    }
    
    /**
        * List Form Edit
        */
    export interface IListFormEdit {
            /**
                * Method to get the fields
                */
            getFields<T = any>(): Array<T>;
    
            /**
                * Method to get the form values
                */
            getValues<T = any>(): PromiseLike<T>;
    }
    
    /**
        * List Form Edit Properties
        */
    export interface IListFormEditProps extends IListFormDisplayProps {
            /** The form mode (New/Edit) */
            controlMode?: number;
    }
    
    /**
        * List Form Properties
        */
    export interface IListFormProps {
            /** If defined, the data will be cached to the session storage. */
            cacheKey?: string;
    
            /** The form fields to exclude. */
            excludeFields?: Array<string>;
    
            /** The form fields */
            fields?: Array<string>;
    
            /** The list item */
            item?: SP.ListItemOData | SP.ListItem;
    
            /** The item id */
            itemId?: number;
    
            /** The list name */
            listName: string;
    
            /** Flag to deteremine if we are loading attachments */
            loadAttachments?: boolean;
    
            /** OData query used when loading an item */
            query?: IODataQuery;
    
            /** The relative web url containing the list */
            webUrl?: string;
    }
    
    /**
        * List Form Result
        */
    export interface IListFormResult {
            /** The item attachments. */
            attachments?: Array<SP.Attachment>;
    
            /** The form fields. */
            fields: { [key: string]: SP.Field };
    
            /** The list item. */
            item?: SP.ListItemOData | SP.ListItem;
    
            /** The item query. */
            query?: IODataQuery;
    
            /** The list. */
            list: SP.List;
    
            /** The relative web url containing the list. */
            webUrl?: string;
    }
}

declare module 'gd-sprest/helper/types/listFormField' {
    import { SP } from "gd-sprest-def";
    import { ITermInfo } from "gd-sprest/helper/types";
    
    /**
        * List Form Field
        */
    export const ListFormField: IListFormField;
    
    /**
        * List Form Field Information
        */
    export interface IListFormFieldInfo {
            /** The default value. */
            defaultValue?: any;
    
            /** The list field. */
            field?: SP.Field | SP.FieldOData | SP.Taxonomy.TaxonomyField;
    
            /** The list name. */
            listName: string;
    
            /** The internal name of the field. */
            name: string;
    
            /** Flag indicating if the field is read-only. */
            readOnly?: boolean;
    
            /** True indicates a required field type. */
            required?: boolean;
    
            /** The display name of the field. */
            title?: string;
    
            /** The field type. */
            type?: number;
    
            /** The field type as a string. */
            typeAsString?: string;
    
            /** The relative web url containing the list. */
            webUrl?: string;
    }
    
    /**
        * List Form Choice Field Information
        */
    export interface IListFormChoiceFieldInfo extends IListFormFieldInfo {
            /** The choices. */
            choices?: Array<string>;
    
            /** The list field. */
            field?: SP.FieldChoice | SP.FieldMultiChoice;
    
            /** Flag to determine if multiple values exist */
            multi?: boolean;
    }
    
    /**
        * List Form Date Field Information
        */
    export interface IListFormDateFieldInfo extends IListFormFieldInfo {
            /** The list field. */
            field?: SP.FieldDateTime;
    
            /** Flag determining if we are displaying time */
            showTime?: boolean;
    }
    
    /**
        * List Form Lookup Field Information
        */
    export interface IListFormLookupFieldInfo extends IListFormFieldInfo {
            /** The list field. */
            field?: SP.FieldLookup;
    
            /** The lookup field */
            lookupField?: string;
    
            /** The lookup list id */
            lookupListId?: string;
    
            /** The lookup web id */
            lookupWebId?: string;
    
            /** Flag to determine if multiple values exist */
            multi?: boolean;
    }
    
    /**
        * List Form MMS Field Information
        */
    export interface IListFormMMSFieldInfo extends IListFormFieldInfo {
            /** The list field. */
            field?: SP.Field & SP.Taxonomy.ITaxonomyField;
    
            /** Flag to determine if multiple values exist */
            multi?: boolean;
    
            /** The term id */
            termId?: string;
    
            /** The term set id */
            termSetId?: string;
    
            /** The term store id */
            termStoreId?: string;
    
            /** The value field */
            valueField?: SP.FieldMultiLineText;
    }
    
    /**
        * List Form Number Field Information
        */
    export interface IListFormNumberFieldInfo extends IListFormFieldInfo {
            /** The number of decimals. */
            decimals?: number;
    
            /** The list field. */
            field?: SP.FieldNumber | SP.FieldCurrency;
    
            /** The maximum value */
            maxValue?: number;
    
            /** The minimum value */
            minValue?: number;
    
            /** Flag determining if we are displaying the value as a percentage */
            showAsPercentage?: boolean;
    }
    
    /**
        * List Form Text Field Information
        */
    export interface IListFormTextFieldInfo extends IListFormFieldInfo {
            /** The list field. */
            field?: SP.FieldText | SP.FieldMultiLineText;
    
            /** Flag determining if this is a note field */
            multiline?: boolean;
    
            /** Flag determining if this field value is html encoded */
            richText?: boolean;
    
            /** The number of rows to display */
            rows?: number;
    }
    
    /**
        * List Form URL Field Information
        */
    export interface IListFormUrlFieldInfo extends IListFormFieldInfo {
            /** The list field. */
            field?: SP.FieldUrl;
    }
    
    /**
        * List Form User Field Information
        */
    export interface IListFormUserFieldInfo extends IListFormFieldInfo {
            /** Flag to determine if groups are allowed */
            allowGroups?: boolean;
    
            /** The list field. */
            field?: SP.FieldUser;
    
            /** Flag to determine if multiple values exist */
            multi?: boolean;
    }
    
    /**
        * List Form Field
        */
    export interface IListFormField {
            /**
                * Creates an instance of the list form field
                * @param props - The list form field properties
                */
            create(props: IListFormFieldInfo): PromiseLike<IListFormFieldInfo>;
    
            /** Method to load the lookup data */
            loadLookupData(info: IListFormLookupFieldInfo, queryTop?: number): PromiseLike<Array<SP.IListItemQuery>>;
    
            /** Method to load the mms data */
            loadMMSData(info: IListFormMMSFieldInfo): PromiseLike<Array<ITermInfo>>;
    
            /** Method to load the mms value field */
            loadMMSValueField(info: IListFormMMSFieldInfo): PromiseLike<SP.FieldMultiLineText>;
    }
}

declare module 'gd-sprest/helper/types/loader' {
    /**
        * Loader
        */
    export const Loader: ILoader;
    
    /**
        * Loader
        */
    export interface ILoader {
            // Internal flag to determine if the SP core libraries have been loaded
            loaded: boolean;
    
            /**
                * Waits for the SharePoint core libraries to be loaded.
                * @param callback - The callback function.
                * @param timeout - The max time (ms) to wait for the libraries to be loaded.
                * @param loadLibraries - Flag to load the core libraries manually.
                */
            waitForSPLibs(callback: any, timeout?: number, loadLibraries?: boolean);
    }
}

declare module 'gd-sprest/helper/types/methods' {
    import { SP } from "gd-sprest-def";
    
    /**
        * Creates a document set item.
        * @param name - The name of the document set folder to create.
        * @param listName - The name of the document set library.
        * @param webUrl - The url of the web containing the document set library.
        */
    export const createDocSet: (name: string, listName: string, webUrl?: string) => PromiseLike<SP.ListItem>;
    
    /**
        * Determines if the user has permissions, based on the permission kind value
        */
    export const hasPermissions: (permissionMask: any, permissions: Array<number> | number) => boolean;
    
    /**
        * Convert a JSON string to a base object
        */
    export function parse<T = any>(jsonString: string): T;
    
    
    /**
        * XML HTTP Request
        */
    export const request: (props: IRequest) => PromiseLike<any>;
    
    /**
        * Request
        */
    export interface IRequest {
            /** The data to pass in the request. */
            data?: any;
    
            /** The request headers. */
            headers?: { [key: string]: string };
    
            /** The request method. */
            method?: string;
    
            /** The request url. */
            url: string;
    }
}

declare module 'gd-sprest/helper/types/sp' {
    /**
        * SharePoint Components
        */
    export const SP: ISPComponents;
    
    /**
        * SharePoint Components
        */
    export interface ISPComponents {
            /**
                * Modal Dialog
                */
            ModalDialog: IModalDialog,
    
            /**
                * Notification
                */
            Notify: INotify,
    
            /**
                * Script on Demand (SOD)
                */
            SOD: ISOD,
    
            /**
                * Status
                */
            Status: IStatus
    }
    
    /**
        * Dialog Options
        */
    export interface IDialogOptions {
            /** A Boolean value that specifies whether the dialog can be maximized. true if the Maximize button is shown; otherwise, false. */
            allowMaximize?: boolean;
    
            /** An object that contains data that are passed to the dialog. */
            args?: any;
    
            /** A Boolean value that specifies whether the dialog platform handles dialog sizing. */
            autoSize?: boolean;
    
            /** A function pointer that specifies the return callback function. The function takes two parameters, a dialogResult of type SP.UI.DialogResult Enumeration and a returnValue of type object that contains any data returned by the dialog. */
            dialogReturnValueCallback?: (dialogResult?: number, returnVal?: any) => void;
    
            /** An integer value that specifies the height of the dialog. If height is not specified, the height of the dialog is autosized by default. If autosize is false, the dialog height is set to 576 pixels. */
            height?: number;
    
            /** An html element to display in the dialog. If both html and url are specified, url takes precedence. Either url or html must be specified. */
            html?: HTMLElement;
    
            /** A Boolean value that specifies whether the Close button appears on the dialog. */
            showClose?: boolean;
    
            /** A Boolean value that specifies whether the dialog opens in a maximized state. true the dialog opens maximized. Otherwise, the dialog is opened at the requested sized if specified; otherwise, the default size, if specified; otherwise, the autosized size. */
            showMaximized?: boolean;
    
            /** A string that contains the title of the dialog. */
            title?: string;
    
            /** A string that contains the URL of the page that appears in the dialog. If both url and html are specified, url takes precedence. Either url or html must be specified. */
            url?: string;
    
            /** An integer value that specifies the width of the dialog. If width is not specified, the width of the dialog is autosized by default. If autosize is false, the width of the dialog is set to 768 pixels. */
            width?: number;
    
            /** An integer value that specifies the x-offset of the dialog. This value works like the CSS left value. */
            x?: number;
    
            /** An integer value that specifies the y-offset of the dialog. This value works like the CSS top value. */
            y?: number;
    }
    
    /**
        * Modal Dialog
        */
    export interface IModalDialog {
            /**
                * Closes the most recently opened modal dialog with the specified dialog result and return value.
                * @param dialogResult - One of the enumeration values that specifies the result of the modal dialog.
                * @param returnVal - The return value of the modal dialog.
                */
            commonModalDialogClose(dialogResult?: number, returnVal?: any);
    
            /**
                * Displays a modal dialog with the specified URL, options, callback function, and arguments.
                * @param url - The URL of the page to be shown in the modal dialog.
                * @param options - The options to create the modal dialog.
                * @param callback - The callback function that runs when the modal dialog is closed.
                * @param args - The arguments to the modal dialog.
                */
            commonModalDialogOpen(url: string, options?: IDialogOptions, callback?: (dialogResult?: number, returnVal?: any) => void, args?: any);
    
            /**
                * Method to ensure the core script is loaded
                */
            load(): PromiseLike<void>;
    
            /**
                * Displays a modal dialog with the specified URL, callback function, width, and height.
                * @param url - The URL of the page to be shown in the modal dialog.
                * @param callback - The callback function that runs when the modal dialog is closed.
                * @param width - The width of the modal dialog.
                * @param height - The height of the modal dialog.
                */
            OpenPopUpPage(url: string, callback?: (dialogResult?: number, returnVal?: any) => void, width?: number, height?: number);
    
            /**
                * Refreshes the parent page of the modal dialog when the dialog is closed by clicking OK.
                * @param dialogResult - The result of the modal dialog.
                */
            RefreshPage(dialogResult?: number);
    
            /**
                * Displays a modal dialog with specified dialog options.
                * @param options - The options to create the modal dialog.
                */
            showModalDialog(options: IDialogOptions): PromiseLike<IModalDialogObj>;
    
            /**
                * Displays a modal dialog using the page at the specified URL.
                * @param url - The URL of the page to be shown in the modal dialog.
                */
            ShowPopupDialog(url: string);
    
            /**
                * Displays a wait screen dialog that has a Cancel button using the specified parameters.
                * @param title - The title of the wait screen dialog.
                * @param message - The message that is shown in the wait screen dialog.
                * @param callback - The callback function that runs when the wait screen dialog is closed.
                * @param height - The height of the wait screen dialog.
                * @param width - The width of the wait screen dialog.
                */
            showWaitScreenSize(title: string, message?: string, callback?: () => void, height?: number, width?: number): PromiseLike<IModalDialogObj>;
    
            /**
                * Displays a wait screen dialog that does not have a Cancel button using the specified parameters.
                * @param title - The title of the wait screen dialog.
                * @param message - The message that is shown in the wait screen dialog.
                * @param height - The height of the wait screen dialog.
                * @param width - The width of the wait screen dialog.
                */
            showWaitScreenWithNoClose(title: string, message?: string, height?: number, width?: number): PromiseLike<IModalDialogObj>;
    }
    
    /**
        * Modal Dialog Object
        */
    export interface IModalDialogObj {
            /**
                * Auto-sizes the modal dialog.
                */
            autoSize();
    
            /**
                * Auto-sizes the modal dialog.
                * Can't find documentation on this.
                */
            autoSizeSupressScrollbar(d: any);
    
            /**
                * Closes the most recently opened modal dialog with the specified dialog result.
                * @param dialogResult - One of the enumeration values that specifies the result of the modal dialog.
                */
            close(dialogResult?: number);
    
            /** Gets the allow maximized property. */
            get_allowMaximize(): boolean;
    
            /** Gets the modal dialog arguments. */
            get_args(): any;
    
            /** Gets the closed property. */
            get_closed(): boolean;
    
            /** Gets the modal dialog element. */
            get_dialogElement(): HTMLDivElement;
    
            /** Need to find documentation. */
            get_firstTabStop(): any;
    
            /** Gets the iframe element. */
            get_frameElement(): HTMLIFrameElement;
    
            /** Gets the html property. */
            get_html(): HTMLElement;
    
            /** True if the maximized/restore button is visible. */
            get_isMaximized(): boolean;
    
            /** Need to find documentation. */
            get_lastTabStop(): any;
    
            /** Gets the return value. */
            get_returnValue(): any;
    
            /** True if the close button is visible. */
            get_showClose(): boolean;
    
            /** Gets the title property. */
            get_title(): string;
    
            /** Gets the url property. */
            get_url(): string;
    
            /**
                * Hides the dialog
                */
            hide();
    
            /**
                * Sets the return value
                */
            set_returnValue(value: any);
    
            /**
                * Sets the title
                */
            set_title(title: string);
    
            /**
                * Shows the dialog
                */
            show();
    }
    
    /**
        * Notify
        */
    export interface INotify {
            /**
                * Adds a notification to the page. By default, notifications appear for five seconds.
                * @param html - The message inside the notification.
                * @param sticky - Specifies whether the notification stays on the page until removed.
                * @returns A promise containing the ID of the notification that was added to the page.
                */
            addNotification(html: string, sticky?: boolean): PromiseLike<string>;
    
            /**
                * Method to ensure the core script is loaded
                */
            load(): PromiseLike<void>;
    
            /**
                * Removes the specified notification from the page.
                * @param id - The notification to remove from the page.
                */
            removeNotification(id: string);
    }
    
    /**
        * Script on Demand (SOD)
        */
    export interface ISOD {
            /**
                * Executes the specified function in the specified file with the optional arguments.
                * @param key - The name of the file containing the JavaScript function.
                * @param functionName - The function to execute.
                * @param args - The optional arguments to the function.
                */
            execute(key: string, functionName: string, ...args);
    
            /**
                * Ensures that the specified file that contains the specified function is loaded and then runs the specified callback function.
                * @param key - The name of the file containing the function that is executed.
                * @param functionName - The name of the function that is executed.
                * @param fn - The function that is called once functionName has finished executing.
                */
            executeFunc(key: string, functionName: string, fn: Function);
    
            /**
                * Executes the specified function if the specified event has occurred; otherwise, adds the function to the pending job queue.
                * @param func - The function to execute.
                * @param eventName - The name of the event.
                */
            executeOrDelayUntilEventNotified(func: Function, eventName: string);
    
            /**
                * Executes the specified function if the file containing it is loaded; otherwise, adds it to the pending job queue.
                * @param func - The function to execute.
                * @param depScriptFileName - The name of the file containing the function.
                */
            executeOrDelayUntilScriptLoaded(func: Function, depScriptFileName: string);
    
            /**
                * Records the event and executes any jobs in the pending job queue that are waiting on the event.
                * @param eventName - The name of the event.
                */
            notifyEventAndExecuteWaitingJobs(eventName: string);
    
            /**
                * Records that the script file is loaded and executes any jobs in the pending job queue that are waiting for the script file to be loaded.
                * @param scriptFileName - The name of the script file.
                */
            notifyScriptLoadedAndExecuteWaitingJobs(scriptFileName: string);
    
            /**
                * Registers the specified file at the specified URL.
                * @param key - The name of the file to register.
                * @param url - The relative (to the server root) URL of the file.
                */
            registerSod(key: string, url: string);
    
            /**
                * Registers the specified file as a dependency of another file.
                * @param key - The name of the file to which the other file is dependent.
                * @param dep - The name of the dependent file.
                */
            registerSodDep(key: string, dep: string);
    }
    
    /**
        * Status
        */
    export interface IStatus {
            /**
                * Adds a status message to the page.
                * @param title - The title of the status message.
                * @param html - The contents of the status message.
                * @param prepend - Specifies whether the status message will appear at the beginning of the list.
                */
            addStatus(title: string, html?: string, prepend?: boolean): PromiseLike<string>;
    
            /**
                * Appends text to an existing status message.
                * @param id - The ID of the status message to remove.
                * @param title - The title of the status message.
                * @param html - The contents of the status message.
                */
            appendStatus(id: string, title: string, html: string): PromiseLike<string>;
    
            /**
                * Method to ensure the core script is loaded
                */
            load(): PromiseLike<void>;
    
            /**
                * Removes all status messages from the page.
                * @param hide - Specifies that the status messages should be hidden.
                */
            removeAllStatus(hide?: boolean);
    
            /**
                * Removes the specified status message.
                * @param id - The ID of the status message to remove.
                */
            removeStatus(id: string);
    
            /**
                * Sets the priority color of the specified status message.
                * @param id - The ID of the status message to remove.
                * @param color - The color to set for the status message. The following table lists the values and their priority.
                */
            setStatusPriColor(id: string, color: string);
    
            /**
                * Updates the specified status message.
                * @param id - The ID of the status message to remove.
                * @param html - The contents of the status message.
                */
            updateStatus(id: string, html: string);
    }
}

declare module 'gd-sprest/helper/types/spCfg' {
    import { SP } from "gd-sprest-def";
    
    /**
        * SharePoint Configuration
        */
    export const SPConfig: (cfg: ISPConfigProps, webUrl?: string) => ISPConfig;
    
    /**
        * Field Information
        */
    export interface IFieldInfo {
            /** The default value of the field. */
            defaultValue?: string;
    
            /** The group name. */
            group?: string;
    
            /** True for hidden fields. */
            hidden?: boolean;
    
            /** The JSLink value for the field. */
            jslink?: string;
    
            /** The internal name of the field. */
            name: string;
    
            /** Flag to determine if the field is readonly. */
            readOnly?: boolean;
    
            /** Flag to determine if the field is required. */
            required?: boolean;
    
            /** The schema definition of the field. */
            schemaXml?: string;
    
            /** Flag to make this field visible in the display form. */
            showInDisplayForm?: boolean;
    
            /** Flag to make this field visible in the edit form. */
            showInEditForm?: boolean;
    
            /** Flag to make this field visible in the list settings. */
            showInListSettings?: boolean;
    
            /** Flag to make this field visible in the new form. */
            showInNewForm?: boolean;
    
            /** Flag to make this field visible in the list views. */
            showInViewForms?: boolean;
    
            /** The field title */
            title?: string;
    
            /** The field type */
            type?: number;
    }
    
    /**
        * Calculated Field Information
        */
    export interface IFieldInfoCalculated extends IFieldInfo {
            /** The field references */
            fieldRefs?: Array<string>;
    
            /** The date/time format */
            format?: number;
    
            /** The formula */
            formula?: string;
    
            /** The result type */
            resultType?: string;
    }
    
    /**
        * Choice Field Information
        */
    export interface IFieldInfoChoice extends IFieldInfo {
            /** The choices */
            choices?: string[];
    
            /** Allow multiple choices */
            multi?: boolean;
    }
    
    /**
        * Currency Field Information
        */
    export interface IFieldInfoCurrency extends IFieldInfo {
            /** The number of decimal places */
            decimals?: number;
    
            /** The country/region whose currency format is being used. */
            lcid?: number;
    
            /** The maximum value */
            max?: number;
    
            /** The minimum value */
            min?: number;
    }
    
    /**
        * Date Field Information
        */
    export interface IFieldInfoDate extends IFieldInfo {
            /** The date/time format */
            format?: number;
    }
    
    /**
        * Lookup Field Information
        */
    export interface IFieldInfoLookup extends IFieldInfo {
            /** The field reference (Required for associated lookup fields) */
            fieldRef?: string;
    
            /** Allow multiple lookup values */
            multi?: boolean;
    
            /** The list id */
            listId?: string;
    
            /** The list name */
            listName?: string;
    
            /** The lookup field to show */
            showField?: string;
    
            /** The relative web url containing the list */
            webUrl?: string;
    }
    
    /**
        * Managed Metadata
        */
    export interface IFieldInfoMMS extends IFieldInfo {
            /** The locale value */
            locale?: number;
    }
    
    /**
        * Note
        */
    export interface IFieldInfoNote extends IFieldInfo {
            /** Flag to append the comments. (This requires versioning to be enabled) */
            appendFl?: boolean;
    
            /** The note field type */
            noteType?: number;
    
            /** The number of lines */
            numberOfLines?: number;
    }
    
    /**
        * Number
        */
    export interface IFieldInfoNumber extends IFieldInfo {
            /** The number of decimal places */
            decimals?: number;
    
            /** The maximum value */
            max?: number;
    
            /** The minimum value */
            min?: number;
    
            /** The number field type */
            numberType?: number;
    }
    
    /**
        * User
        */
    export interface IFieldInfoUser extends IFieldInfo {
            /** Allow multiple choices */
            multi?: boolean;
    
            /** The user selection mode */
            selectionMode?: number;
    
            /** The user selection scope */
            selectionScope?: number;
    }
    /**
        * SharePoint Configuration - Content Type Information
        */
    export interface ISPCfgContentTypeInfo extends SP.ContentTypeCreationInformation {
            /**
                * The content type. (This value is set internally.)
                */
            ContentType?: SP.ContentType;
    
            /**
                * The field references.
                */
            FieldRefs?: Array<string>;
    
            /**
                * The JSLink property.
                */
            JSLink?: string;
    
            /**
                * The parent content type name, required if different then the name.
                */
            ParentName?: string;
    
            /**
                * The url of the web containing the parent content type, required if the parent content type doesn't exist in the current web.
                */
            ParentWebUrl?: string;
    
            /**
                * Event triggered after the content type is created.
                */
            onCreated?: (ct: SP.ContentType) => void;
    
            /**
                * Event triggered after the content type is updated.
                */
            onUpdated?: (ct: SP.ContentType) => void;
    }
    
    /**
        * SharePoint Configuration - Custom Action Information
        */
    export interface ISPCfgCustomActionInfo {
            /**
                * Custom actions to be created at the site collection level.
                */
            Site?: Array<SP.UserCustomActionProps>,
    
            /**
                * Custom actions to be created at the web level.
                */
            Web?: Array<SP.UserCustomActionProps>
    }
    
    /**
        * SharePoint Configuration - Field Information
        */
    export interface ISPCfgFieldInfo extends IFieldInfo {
            /**
                * Event triggered after the field is created.
                */
            onCreated?: (field: SP.Field) => void;
    
            /**
                * Event triggered after the field is updated.
                */
            onUpdated?: (field: SP.Field) => void;
    }
    
    /**
        * SharePoint Configuration - List Information
        */
    export interface ISPCfgListInfo {
            /** The content Types. */
            ContentTypes?: Array<ISPCfgContentTypeInfo>;
    
            /** The custom list fields. */
            CustomFields?: Array<ISPCfgFieldInfo>;
    
            /** The list creation information. */
            ListInformation: SP.ListProps;
    
            /** The title display name. */
            TitleFieldDisplayName?: string;
    
            /** The user custom actions. */
            UserCustomActions?: Array<SP.UserCustomActionProps>;
    
            /** The view information. */
            ViewInformation?: Array<ISPCfgViewInfo>;
    
            /**
                * Event triggered after the list is created or updated.
                */
            onCreated?: (list: SP.List) => void;
    
            /**
                * Event triggered after the list is updated.
                */
            onUpdated?: (list: SP.List) => void;
    }
    
    /**
        * SharePoint Configuration - View Information
        */
    export interface ISPCfgViewInfo {
            /** The JSLink property. */
            JSLink?: string;
    
            /** The view fields. */
            ViewFields?: Array<string>;
    
            /** The view name. */
            ViewName: string;
    
            /** The view query. */
            ViewQuery?: string;
    
            /**
                * Event triggered after the view is created or updated.
                */
            onCreated?: (view: SP.View) => void;
    
            /**
                * Event triggered after the view is updated.
                */
            onUpdated?: (view: SP.View) => void;
    }
    
    /**
        * SharePoint Configuration - WebPart Information
        */
    export interface ISPCfgWebPartInfo {
            /** The file name of the webpart. */
            FileName: string;
    
            /** The webpart group. */
            Group?: string;
    
            /** The webpart xml */
            XML: string;
    
            /**
                * Event triggered after the webpart file is created.
                */
            onCreated?: (file: SP.File) => void;
    
            /**
                * Event triggered after the webpart file is updated.
                */
            onUpdated?: (file: SP.File) => void;
    }
    
    /**
        * SharePoint Configuration Methods
        */
    export interface ISPConfig {
            /** The configuration. */
            _configuration: ISPConfigProps;
    
            /**
                * Method to install the configuration
                */
            install(): PromiseLike<void>;
    
            /**
                * Method to install the configuration
                */
            uninstall(): PromiseLike<void>;
    }
    
    /**
        * SharePoint Configuration - Properties
        */
    export interface ISPConfigProps {
            /** The content Types. */
            ContentTypes?: Array<ISPCfgContentTypeInfo>;
    
            /** The custom action configuration. */
            CustomActionCfg?: ISPCfgCustomActionInfo;
    
            /** The site column configuration. */
            Fields?: Array<ISPCfgFieldInfo>;
    
            /** The list configuration. */
            ListCfg?: Array<ISPCfgListInfo>;
    
            /** The web part configuration. */
            WebPartCfg?: Array<ISPCfgWebPartInfo>;
    }
    
    /**
        * SharePoint Configuration - Types
        */
    export interface ISPConfigTypes {
            /** Fields */
            Fields: number;
    
            /** Content Types */
            ContentTypes: number;
    
            /** Lists */
            Lists: number;
    
            /** Site User Custom Actions */
            SiteUserCustomActions: number;
    
            /** Web User Custom Actions */
            WebUserCustomActions: number;
    }
}

declare module 'gd-sprest/helper/types/spCfgTypes' {
    /**
        * SharePoint Configuration Field Types
        */
    export const SPCfgFieldType: ISPCfgFieldType;
    
    /**
        * SharePoint Configuration Types
        * The value determines the order to install the object type.
        */
    export const SPCfgType: ISPCfgType;
    
    /** The field types */
    export type ISPCfgFieldType = {
            Boolean: number;
            Calculated: number;
            Choice: number;
            Currency: number;
            Date: number;
            Geolocation: number;
            Lookup: number;
            MMS: number;
            Note: number;
            Number: number;
            Text: number;
            Url: number;
            User: number;
    }
    
    /** The configuration types */
    export type ISPCfgType = {
            Fields: number;
            ContentTypes: number;
            Lists: number;
            SiteUserCustomActions: number;
            WebParts: number;
            WebUserCustomActions: number;
    }
}

declare module 'gd-sprest/helper/types/taxonomy' {
    
    /**
        * Taxonomy Helper Class
        */
    export const Taxonomy: ITaxonomy;
    
    /**
     * Taxonomy Helper
     */
    export interface ITaxonomy {
            /**
                * Method to find a term by id
                * @param term - The term
                * @param termId - The term id to search for
                */
            findById(term: ITerm, termId: string): ITerm;
    
            /**
                * Method to find a term by name
                * @param term - The term
                * @param termName - The term name to search for
                */
            findByName(term: ITerm, termName: string): ITerm;
    
            /**
                * Method to get the term group
                * @param groupName - The group name.
                */
            getTermGroup(groupName?: string): PromiseLike<{ context: any, termGroup: any }>;
    
            /**
                * Method to get the term groups
                */
            getTermGroups(): PromiseLike<Array<ITermGroupInfo>>;
    
            /**
                * Method to get the term sets for a group
                * @param groupName - The group name.
                */
            getTermSets(groupName: string): PromiseLike<Array<ITermSetInfo>>;
    
            /**
                * Method to get the term sets for the site collection
                */
            getTermSetsFromDefaultSC(): PromiseLike<Array<ITermSetInfo>>;
    
            /**
                * Method to get the terms
                * @param termSet - The term set.
                * @param termSetTerms - The term set terms.
                */
            getTerms(termSet, termSetTerms): Array<ITermInfo>;
    
            /**
                * Method to get the terms by id
                * @param termStoreId - The term store guid
                * @param termSetId - The term set guid
                */
            getTermsById(termStoreId: string, termSetId: string): PromiseLike<Array<ITermInfo>>;
    
            /**
                * Method to get the term set by id
                * @param termStoreId - The term store guid
                * @param termSetId - The term set guid
                */
            getTermSetById(termStoreId: string, termSetId: string): PromiseLike<ITerm>;
    
            /**
                * Method to get the terms from the default site collection
                * @param termSetName - The term set name
                */
            getTermsFromDefaultSC(termSetName: string): PromiseLike<Array<ITermInfo>>;
    
            /**
                * Method to get the term set from the default site collection
                */
            getTermSetFromDefaultSC(termSetName: string): PromiseLike<ITerm>;
    
            /**
                * Method to get a terms from a specified group
                */
            getTermsByGroupName(termSetName: string, groupName: string): PromiseLike<Array<ITermInfo>>;
    
            /**
                * Method to get the term set from the default site collection
                */
            getTermSetByGroupName(termSetName: string, groupName: string): PromiseLike<ITerm>;
    
            /**
                * Method to ensure the taxonomy script references are loaded.
                */
            loadScripts(): PromiseLike<void>;
    
            /**
                * Method to convert a term set into an array of terms
                * @param term - The term
                */
            toArray(term: ITerm | ITermInfo): Array<ITermInfo>;
    
            /**
                * Method to convert a term to a field value
                * @param term - The term
                */
            toFieldValue(term: ITerm | ITermInfo): any;
    
            /**
                * Method to convert a collection of terms to a field value
                * @param terms - The terms
                */
            toFieldMultiValue(terms: Array<ITerm | ITermInfo>): any;
    
            /**
                * Method to convert an array of terms into a term set
                * @param terms - The terms
                */
            toObject(terms: Array<ITermInfo>): ITerm;
    }
    
    
    /**
        * Taxonomy Term
        */
    export interface ITerm {
            /** The root term information */
            info: ITermInfo;
    
            /** The parent term */
            parent?: ITerm;
    }
    
    /**
        * Taxonomy Term Group Information
        */
    export interface ITermGroupInfo {
            /** The term description */
            description: string;
    
            /** The term id */
            id: string;
    
            /** The term name */
            name: string;
    }
    
    /**
        * Taxonomy Term Information
        */
    export interface ITermInfo {
            /** The term description */
            description: string;
    
            /** The term id */
            id: string;
    
            /** The term name */
            name: string;
    
            /** The parent term */
            parent?: ITerm;
    
            /** The term path */
            path: Array<string>;
    
            /** The term path as a string */
            pathAsString: string;
    
            /** The term custom properties */
            props: { [key: string]: string; };
    }
    
    /**
        * Taxonomy Term Set Information
        */
    export interface ITermSetInfo {
            /** The term description */
            description: string;
    
            /** The term id */
            id: string;
    
            /** The term name */
            name: string;
    
            /** The term custom properties */
            props: { [key: string]: string; };
    }
}

declare module 'gd-sprest/helper/types/webpart' {
    /**
        * Web Part
        */
    export const WebPart: IWebPart;
    
    /**
        * Web Part
        */
    export interface IWebPart {
            /**
                * Creates an instance of a webpart.
                * @param props - The webpart properties.
                */
            new(props: IWebPartProps);
    
            /**
                * Adds a script editor webpart to a page.
                * @param url - The relative url of the page.
                * @param wpProps - The webpart properties.
                */
            addWebPartToPage(url: string, wpProps: IWebPartScriptEditor): PromiseLike<void>;
    
            /**
                * Creates an instance of a webpart.
                * @param props - The webpart properties.
                */
            create(props: IWebPartProps);
    
            /**
                * Determines if the page is being edited.
                */
            isEditMode(): boolean;
    }
    
    /**
        * The webpart configuration
        */
    export interface IWebPartCfg {
            /** The webpart id */
            WebPartId?: string;
    }
    
    /**
        * The webpart information
        */
    export interface IWebPartInfo {
            /** The configuration */
            cfg: IWebPartCfg;
    
            /** The element to render the webpart to */
            el: HTMLElement;
    
            /** The webpart id */
            wpId: string;
    }
    
    /**
        * The webpart properties
        */
    export interface IWebPartProps {
            /** The optional configuration element id */
            cfgElementId?: string;
    
            /** The optional help link properties */
            helpProps?: {
                    /** The link title */
                    title?: string;
    
                    /** The link url */
                    url: string;
            };
    
            /** The post render event */
            onPostRender?: (wp: IWebPartInfo) => void;
    
            /** The render event triggered when the page is in 'Display' mode */
            onRenderDisplay?: (wp: IWebPartInfo) => any;
    
            /** The render event triggered when the page is in 'Edit' mode */
            onRenderEdit?: (wp: IWebPartInfo) => any;
    
            /** The target element id to render the webpart to */
            elementId: string;
    }
    
    /**
        * The script editor webpart properties
        */
    export interface IWebPartScriptEditor {
            /** The webpart description. */
            description?: string;
    
            /** The webpart content. */
            content: string;
    
            /** The webpart index. */
            index?: number;
    
            /** The webpart title. */
            title?: string;
    
            /** The webpart zone. */
            zone?: string;
    }
}

declare module 'gd-sprest/helper/types/executor' {
    /**
      * Executor
      * @param methodParams - An array of parameters to execute in order synchronously.
      * @param method - The method to execute for each method parameter provided.
      * @param onExecuted - An optional event executed after the method completes. If a promise is returned, the executor will wait until it's resolved.
      */
    export function Executor<T = any>(methodParams: Array<T>, method: (param: T) => PromiseLike<any> | void, onExecuted?: (...args) => PromiseLike<any> | void): PromiseLike<any>;
}

declare module 'gd-sprest/mapper/types/sptypes' {
    import { SP } from "gd-sprest-def";
    
    /**
        * Base Permission Types
        */
    export const BasePermissionTypes: IBasePermissionTypes;
    export type IBasePermissionTypes = {
            AddAndCustomizePages: number,
            AddDelPrivateWebParts: number,
            AddListItems: number,
            AnonymousSearchAccessList: number,
            AnonymousSearchAccessWebLists: number,
            ApplyStyleSheets: number,
            ApplyThemeAndBorder: number,
            ApproveItems: number,
            BrowseDirectories: number,
            BrowseUserInfo: number,
            CancelCheckout: number,
            CreateAlerts: number,
            CreateGroups: number,
            CreateSSCSite: number,
            DeleteListItems: number,
            DeleteVersions: number,
            EditListItems: number,
            EditMyUserInfo: number,
            EmptyMask: number,
            EnumeratePermissions: number,
            FullMask: number,
            ManageAlerts: number,
            ManageLists: number,
            ManagePermissions: number,
            ManagePersonalViews: number,
            ManageSubwebs: number,
            ManageWeb: number,
            Open: number,
            OpenItems: number,
            UpdatePersonalWebParts: number,
            UseClientIntegration: number,
            UseRemoteAPIs: number,
            ViewFormPages: number,
            ViewListItems: number,
            ViewPages: number,
            ViewUsageData: number,
            ViewVersions: number
    }
    
    /**
        * Base Permission Result
        */
    export interface IGetUserEffectivePermissionsResult {
            GetUserEffectivePermissions: SP.BasePermissions
    }
    
    /**
        * Calendar Types
        */
    export const CalendarType: ICalendarType;
    export type ICalendarType = {
            /** Gregorian (localized) */
            Gregorian: number,
    
            /** Japanese Emperor Era */
            JapaneseEmperorEra: number,
    
            /** Taiwan Calendar */
            TaiwanCalendar: number,
    
            /** Korean Tangun Era */
            KoreanTangunEra: number,
    
            /** Hijri (Arabic Lunar) */
            Hijri: number,
    
            /** Thai */
            Thai: number,
    
            /** Hebrew Lunar */
            HebrewLunar: number,
    
            /** Gregorian (Middle East French) */
            GregorianMiddleEastFrench: number,
    
            /** Gregorian (Arabic) */
            GregorianArabic: number,
    
            /** Gregorian (Transliterated English) */
            GregorianTransliteratedEnglish: number,
    
            /** Gregorian (Transliterated French) */
            GregorianTransliteratedFrench: number,
    
            /** Korean and Japanese Lunar */
            KoreanandJapaneseLunar: number,
    
            /** Chinese Lunar */
            ChineseLunar: number,
    
            /** Saka Era */
            SakaEra: number
    }
    
    /**
        * Check Out Types
        */
    export const CheckOutType: ICheckOutType;
    export type ICheckOutType = {
            /** Online */
            Online: number,
    
            /** Offline */
            Offline: number,
    
            /** None */
            None: number
    };
    
    /**
        * Choice Format Types
        */
    export const ChoiceFormatType: IChoiceFormatType;
    export type IChoiceFormatType = {
            /** Dropdown */
            Dropdown: number,
    
            /** Radio buttons */
            RadioButtons: number
    };
    
    /**
        * Client Template Utility
        */
    export const ClientTemplateUtility: IClientTemplateUtility;
    export type IClientTemplateUtility = {
            /** User Lookup Delimiter */
            UserLookupDelimitString: string,
    
            /** Multi-User Value Delimiter */
            UserMultiValueDelimitString: string
    }
    
    /**
        * Control Modes
        */
    export const ControlMode: IControlMode;
    export type IControlMode = {
            /** A placeholder value in the export typeeration indicating that it has no valid display mode from one of the other export typeeration values. */
            Invalid: number,
    
            /** Specifies that the control is in display mode. */
            Display: number,
    
            /** Specifies that the control is in edit mode. */
            Edit: number,
    
            /** Specifies that the control is in new mode. */
            New: number,
    
            /** Specifies that the control is in view mode. */
            View: number
    };
    
    /**
        * Date Format
        */
    export const DateFormat: IDateFormat;
    export type IDateFormat = {
            /** Displays only the date. */
            DateOnly: number,
    
            /** Displays the date and time. */
            DateTime: number
    }
    
    /**
        * Draft Visibility Types
        */
    export const DraftVisibilityType: IDraftVisibilityType;
    export type IDraftVisibilityType = {
            /** export typeeration whose values specify that the minimum permission is approver. */
            Approver: number,
    
            /** export typeeration whose values specify that the minimum permission is author. */
            Author: number,
    
            /** export typeeration whose values specify that the minimum permission is reader. */
            Reader: number
    };
    
    /**
        * Event Receiver Types
        */
    export const EventReceiverType: IEventReceiverType;
    export type IEventReceiverType = {
            /** Event that occurs before an item has been added. */
            ItemAdding: number,
    
            /** Event that occurs before an item is updated. */
            ItemUpdating: number,
    
            /** Event that occurs before an item is deleted. */
            ItemDeleting: number,
    
            /** Event that occurs before an item has been checked in. */
            ItemCheckingIn: number,
    
            /** Event that occurs before an item is checked out. */
            ItemCheckingOut: number,
    
            /** Event that occurs before an item is unchecked out. */
            ItemUncheckingOut: number,
    
            /** Event that occurs before an attachment has been added to an item. */
            ItemAttachmentAdding: number,
    
            /** Event that occurs before an attachment has been removed from the item. */
            ItemAttachmentDeleting: number,
    
            /** Event that occurs before a file is moved. */
            ItemFileMoving: number,
    
            /** Event that occurs before a document version is deleted. */
            ItemVersionDeleting: number,
    
            /** Event that occurs before a field is added to a list. */
            FieldAdding: number,
    
            /** Event that occurs before a field is updated. */
            FieldUpdating: number,
    
            /** Event that occurs before a field is removed from a list. */
            FieldDeleting: number,
    
            /** Event that occurs before a list is created. */
            ListAdding: number,
    
            /** Event that occurs before a list is deleted. */
            ListDeleting: number,
    
            /** Event that occurs before a site collection is deleted. */
            SiteDeleting: number,
    
            /** Event that occurs before a site is deleted. */
            WebDeleting: number,
    
            /** Event that occurs before a site URL has been changed. */
            WebMoving: number,
    
            /** Event that occurs before a new site is created. */
            WebAdding: number,
    
            /** Event that occurs before a security group is added. */
            GroupAdding: number,
    
            /** Event that occurs before a security group is updated. */
            GroupUpdating: number,
    
            /** Event that occurs before a security group is deleted. */
            GroupDeleting: number,
    
            /** Event that occurs before a user is added to a security group. */
            GroupUserAdding: number,
    
            /** Event that occurs before a user is deleted from a security group. */
            GroupUserDeleting: number,
    
            /** Event that occurs before a role definition is added. */
            RoleDefinitionAdding: number,
    
            /** Event that occurs before a role definition is updated. */
            RoleDefinitionUpdating: number,
    
            /** Event that occurs before a role definition is deleted. */
            RoleDefinitionDeleting: number,
    
            /** Event that occurs before a role assignment is added. */
            RoleAssignmentAdding: number,
    
            /** Event that occurs before a role assignment is deleted. */
            RoleAssignmentDeleting: number,
    
            /** Event that occurs before an inheritance is broken. */
            InheritanceBreaking: number,
    
            /** Event that occurs before an inheritance is restored. */
            InheritanceResetting: number,
    
            /** Event that occurs before a workflow starts running. */
            WorkflowStarting: number,
    
            /** Event that occurs after an item has been added. */
            ItemAdded: number,
    
            /** Event that occurs after an item has been updated. */
            ItemUpdated: number,
    
            /** Event that occurs after an item has been deleted. */
            ItemDeleted: number,
    
            /** Event that occurs after an item has been checked in. */
            ItemCheckedIn: number,
    
            /** Event that occurs after an item has been checked out. */
            ItemCheckedOut: number,
    
            /** Event that occurs after an item has been unchecked out. */
            ItemUncheckedOut: number,
    
            /** Event that occurs after an attachment has been added to the item. */
            ItemAttachmentAdded: number,
    
            /** Event that occurs after an attachment has been removed from the item. */
            ItemAttachmentDeleted: number,
    
            /** Event that occurs after a file has been moved. */
            ItemFileMoved: number,
    
            /** Event that occurs after a file is transformed from one type to another. */
            ItemFileConverted: number,
    
            /** Event that occurs after a document version is deleted. */
            ItemVersionDeleted: number,
    
            /** Event that occurs after a field has been added. */
            FieldAdded: number,
    
            /** Event that occurs after a field has been updated. */
            FieldUpdated: number,
    
            /** Event that occurs after a field has been removed. */
            FieldDeleted: number,
    
            /** Event that occurs after a list has been created. */
            ListAdded: number,
    
            /** Event that occurs after a list has been deleted. */
            ListDeleted: number,
    
            /** Event that occurs after a site collection has been deleted. */
            SiteDeleted: number,
    
            /** Event that occurs after a site has been deleted. */
            WebDeleted: number,
    
            /** Event that occurs after a site URL has been changed. */
            WebMoved: number,
    
            /** Event that occurs after a new site has been created, but before that new site is provisioned. */
            WebProvisioned: number,
    
            /** Event that occurs happens after a security group is added. */
            GroupAdded: number,
    
            /** Event that occurs after a security group is updated. */
            GroupUpdated: number,
    
            /** Event that occurs after a security group is deleted. */
            GroupDeleted: number,
    
            /** Event that occurs after a user is added to a security group. */
            GroupUserAdded: number,
    
            /** Event that occurs after a user is deleted from a security group. */
            GroupUserDeleted: number,
    
            /** Event that occurs after a role definition is added. */
            RoleDefinitionAdded: number,
    
            /** Event that occurs after a role definition is updated. */
            RoleDefinitionUpdated: number,
    
            /** Event that occurs after a role definition is deleted. */
            RoleDefinitionDeleted: number,
    
            /** Event that occurs after a role assignment is added. */
            RoleAssignmentAdded: number,
    
            /** Event that occurs after a role definition is deleted. */
            RoleAssignmentDeleted: number,
    
            /** Event that occurs after an inheritance is broken. */
            InheritanceBroken: number,
    
            /** Event that occurs after an inheritance is restored. */
            InheritanceReset: number,
    
            /** Event that occurs after a workflow has started running. */
            WorkflowStarted: number,
    
            /** Event that occurs after a workflow has been postponed. */
            WorkflowPostponed: number,
    
            /** Event that occurs after a workflow has completed running. */
            WorkflowCompleted: number,
    
            /** Event that occurs when an instance of an external content type has been added. */
            EntityInstanceAdded: number,
    
            /** Event that occurs when an instance of an external content type has been updated. */
            EntityInstanceUpdated: number,
    
            /** Event that occurs when an instance of an external content type has been deleted. */
            EntityInstanceDeleted: number,
    
            /** Event that occurs after an app is installed. */
            AppInstalled: number,
    
            /** Event that occurs after an app is upgraded. */
            AppUpgraded: number,
    
            /** Event that occurs before an app is uninstalled. */
            AppUninstalling: number,
    
            /** Event that occurs after a list receives an e-mail message. */
            EmailReceived: number,
    
            /** Identifies workflow event receivers, and is therefore not a true event type. */
            ContextEvent: number,
    };
    
    /**
        * Event Receiver Synchronization Types
        */
    export const EventReceiverSynchronizationType: IEventReceiverSynchronizationType;
    export type IEventReceiverSynchronizationType = {
            /** Event to be triggered asynchronously. */
            Asynchronous: number,
    
            /** Event to be triggered synchronously. */
            Synchronization: number
    };
    
    /**
        * Field Note Types
        */
    export const FieldNoteType: IFieldNoteType;
    export type IFieldNoteType = {
            /** Enhance Rich Text */
            EnhancedRichText: number,
    
            /** Rich Text */
            RichText: number,
    
            /** Text Only */
            TextOnly: number;
    }
    
    /**
        * Field Number Type
        */
    export const FieldNumberType: IFieldNumberType;
    export type IFieldNumberType = {
            /** Decimal */
            Decimal: number,
    
            /** Integer */
            Integer: number,
    
            /** Percentage */
            Percentage: number,
    }
    
    /**
        * Field Result Types
        */
    export const FieldResultType: IFieldResultType;
    export type IFieldResultType = {
            /** Boolean */
            Boolean: string,
    
            /** Currency */
            Currency: string,
    
            /** Date Only */
            DateOnly: string,
    
            /** Date & Time */
            DateTime: string,
    
            /** Number */
            Number: string,
    
            /** Text */
            Text: string
    }
    
    /**
        * Field Types
        */
    export const FieldType: IFieldType;
    export type IFieldType = {
            /** Specifies that the field indicates whether a meeting in a calendar list is an all-day event. */
            AllDayEvent: number,
    
            /** Specifies that the field indicates whether the list item has attachments. */
            Attachments: number,
    
            /** Specifies that the field contains a Boolean value. */
            Boolean: number,
    
            /** Specifies that the field is a calculated field. */
            Calculated: number,
    
            /** Specifies that the field contains a single value from a set of specified values. */
            Choice: number,
    
            /** Specifies that the field is a computed field. */
            Computed: number,
    
            /** Specifies that the field contains a content type identifier as a value. */
            ContentTypeId: number,
    
            /** Specifies that the field contains a monotonically increasing integer. */
            Counter: number,
    
            /** Specifies that the field contains a link between projects in a Meeting Workspace site. */
            CrossProjectLink: number,
    
            /** Specifies that the field contains a currency value. */
            Currency: number,
    
            /** Specifies that the field contains a date and time value or a date-only value. */
            DateTime: number,
    
            /** Specifies that the type of the field was set to an invalid value. */
            Error: number,
    
            /** Specifies that the field contains the leaf name of a document as a value. */
            File: number,
    
            /** Specifies that the field contains geographical location values. */
            Geolocation: number,
    
            /** Specifies that the field contains rating scale values for a survey list. */
            GridChoice: number,
    
            /** Specifies that the field contains a GUID value. */
            Guid: number,
    
            /** Specifies that the field contains an integer value. */
            Integer: number,
    
            /** Must not be used. */
            Invalid: number,
    
            /** Specifies that the field is a lookup field. */
            Lookup: number,
    
            /** Must not be used. */
            MaxItems: number,
    
            /** Specifies that the field indicates moderation status. */
            ModStat: number,
    
            /** Specifies that the field contains one or more values from a set of specified values. */
            MultiChoice: number,
    
            /** Specifies that the field contains multiple lines of text. */
            Note: number,
    
            /** Specifies that the field contains a floating-point number value. */
            Number: number,
    
            /** Specifies that the field separates questions in a survey list onto multiple pages. */
            PageSeparator: number,
    
            /** Specifies that the field indicates whether a meeting in a calendar list recurs. */
            Recurrence: number,
    
            /** Specifies that the field contains a single line of text. */
            Text: number,
    
            /** Specifies that the field indicates the position of a discussion item in a threaded view of a discussion board. */
            ThreadIndex: number,
    
            /** Specifies that the field indicates the thread for a discussion item in a threaded view of a discussion board. */
            Threading: number,
    
            /** Specifies that the field contains a URI and an optional description of the URI. */
            URL: number,
    
            /** Specifies that the field contains one or more users and groups as values. */
            User: number,
    
            /** Specifies that the field contains the most recent event in a workflow instance. */
            WorkflowEventType: number,
    
            /** Specifies that the field indicates the status of a workflow instance on a list item. */
            WorkflowStatus: number
    };
    
    /**
        * Field User Selection Types
        */
    export const FieldUserSelectionType: IFieldUserSelectionType;
    export type IFieldUserSelectionType = {
            /** People only. */
            PeopleOnly: number,
    
            /** People and groups. */
            PeopleAndGroups: number
    }
    
    /**
        * File Template Types
     */
    export const FileTemplateType: IFileTemplateType;
    export type IFileTemplateType = {
            /** export typeeration whose value specifies default form template. */
            FormPage: number,
    
            /** export typeeration whose value specifies default view template. */
            StandardPage: number,
    
            /** export typeeration whose value specifies default wiki template. */
            WikiPage: number
    };
    
    /**
        * Friendly Date Format
        */
    export const FriendlyDateFormat: IFriendlyDateFormat;
    export type IFriendlyDateFormat = {
            /** Unspecified */
            Unspecified: number,
    
            /** Disabled (standard absolute) */
            Disabled: number,
    
            /** Relative (standard friendly relative) */
            Relative: number
    }
    
    /**
        * List Template Types
     */
    export const ListTemplateType: IListTemplateType;
    export type IListTemplateType = {
            /** Access Request List */
            AccessRequest: number,
    
            /** Administrator Tasks */
            AdminTasks: number,
    
            /** Agenda (Meeting) */
            Agenda: number,
    
            /** App Data Catalog */
            AppDataCatalog: number,
    
            /** Announcements */
            Announcements: number,
    
            /** Call Track */
            CallTrack: number,
    
            /** Categories (Blog) */
            Categories: number,
    
            /** Circulation */
            Circulation: number,
    
            /** Comments (Blog) */
            Comments: number,
    
            /** Contacts */
            Contacts: number,
    
            /** Custom grid for a list */
            CustomGrid: number,
    
            /** Data connection library for sharing information about external data connections */
            DataConnectionLibrary: number,
    
            /** Data sources for a site */
            DataSources: number,
    
            /** Decisions (Meeting) */
            Decision: number,
    
            /** Design Catalog */
            DesignCatalog: number,
    
            /** Draft Apps library in Developer Site */
            DeveloperSiteDraftApps: number,
    
            /** Discussion board */
            DiscussionBoard: number,
    
            /** Document library */
            DocumentLibrary: number,
    
            /** Calendar */
            Events: number,
    
            /** External */
            ExternalList: number,
    
            /** Facility */
            Facility: number,
    
            /** Project Tasks */
            GanttTasks: number,
    
            /** Custom list */
            GenericList: number,
    
            /** Health Reports */
            HealthReports: number,
    
            /** Health Rules */
            HealthRules: number,
    
            /** Help Library */
            HelpLibrary: number,
    
            /** Holidays */
            Holidays: number,
    
            /** Workspace Pages (Meeting) */
            HomePageLibrary: number,
    
            /** IME (Input Method Editor) Dictionary */
            IMEDic: number,
    
            /** Issue tracking */
            IssueTracking: number,
    
            /** Links */
            Links: number,
    
            /** List Template gallery */
            ListTemplateCatalog: number,
    
            /** Master Page gallery */
            MasterPageCatalog: number,
    
            /** Maintenance Logs Library */
            MaintenanceLogs: number,
    
            /** Objectives (Meeting) */
            MeetingObjective: number,
    
            /** Meeting Series (Meeting) */
            Meetings: number,
    
            /** Attendees (Meeting) */
            MeetingUser: number,
    
            /** My Site Document Library */
            MySiteDocumentLibrary: number,
    
            /** Posts (Blog) */
            Posts: number,
    
            /** No Code Public Workflow */
            NoCodePublic: number,
    
            /** No Code Workflows */
            NoCodeWorkflows: number,
    
            /** Picture library */
            PictureLibrary: number,
    
            /** Solutions */
            SolutionCatalog: number,
    
            /** Survey */
            Survey: number,
    
            /** Tasks */
            Tasks: number,
    
            /** Tasks with Timeline and Hierarchy */
            TasksWithTimelineAndHierarchy: number,
    
            /** Text Box (Meeting) */
            TextBox: number,
    
            /** Themes */
            ThemeCatalog: number,
    
            /** Things To Bring (Meeting) */
            ThingsToBring: number,
    
            /** Timecard */
            Timecard: number,
    
            /** User Information */
            UserInformation: number,
    
            /** Wiki Page Library */
            WebPageLibrary: number,
    
            /** Web Part gallery */
            WebPartCatalog: number,
    
            /** Site template gallery */
            WebTemplateCatalog: number,
    
            /** Whereabouts */
            Whereabouts: number,
    
            /** Workflow History */
            WorkflowHistory: number,
    
            /** Custom Workflow Process */
            WorkflowProcess: number,
    
            /** XML Form library */
            XMLForm: number
    };
    
    /**
        * Locale LCID Types
        */
    export const LocaleLCIDType: ILocaleLCIDType;
    export type ILocaleLCIDType = {
            Afrikaans: number,
            Albanian: number,
            ArabicAlgeria: number,
            ArabicBahrain: number,
            ArabicEgypt: number,
            ArabicIraq: number,
            ArabicJordan: number,
            ArabicLebanon: number,
            ArabicLibya: number,
            ArabicMorocco: number,
            ArabicOman: number,
            ArabicQatar: number,
            ArabicSaudiArabia: number,
            ArabicSyria: number,
            ArabicTunisia: number,
            ArabicUAE: number,
            ArabicYemen: number,
            Armenian: number,
            AzeriCyrillic: number,
            AzeriLatin: number,
            Basque: number,
            Belarusian: number,
            Bulgarian: number,
            Catalan: number,
            ChineseHongKongSAR: number,
            ChineseMacaoSAR: number,
            ChinesePRC: number,
            ChineseSingapore: number,
            ChineseTaiwan: number,
            CroatianCroatia: number,
            Czech: number,
            Danish: number,
            Divehi: number,
            DutchBelgium: number,
            DutchNetherlands: number,
            EnglishAustralia: number,
            EnglishBelize: number,
            EnglishCanada: number,
            EnglishCaribbean: number,
            EnglishIreland: number,
            EnglishJamaica: number,
            EnglishNewZealand: number,
            EnglishPhilippines: number,
            EnglishSouthAfrica: number,
            EnglishTrinidad: number,
            EnglishUnitedKingdom: number,
            EnglishUnitedStates: number,
            EnglishZimbabwe: number,
            Estonian: number,
            Faeroese: number,
            Finnish: number,
            FrenchBelgium: number,
            FrenchCanada: number,
            FrenchFrance: number,
            FrenchLuxembourg: number,
            FrenchMonaco: number,
            FrenchSwitzerland: number,
            Galician: number,
            Georgian: number,
            GermanAustria: number,
            GermanGermany: number,
            GermanLiechtenstein: number,
            GermanLuxembourg: number,
            GermanSwitzerland: number,
            Greek: number,
            Gujarati: number,
            HebrewIsrael: number,
            HindiIndia: number,
            Hungarian: number,
            Icelandic: number,
            Indonesian: number,
            ItalianItaly: number,
            ItalianSwitzerland: number,
            Japanese: number,
            Kannada: number,
            Kazakh: number,
            Konkani: number,
            Korean: number,
            KyrgyzCyrillic: number,
            Latvian: number,
            Lithuanian: number,
            MacedonianFYROM: number,
            Malay: number,
            MalayBruneiDarussalam: number,
            Marathi: number,
            MongolianCyrillic: number,
            NorwegianBokmal: number,
            NorwegianNynorsk: number,
            PersianIran: number,
            Polish: number,
            PortugueseBrazil: number,
            PortuguesePortugal: number,
            Punjabi: number,
            Romanian: number,
            Russian: number,
            Sanskrit: number,
            SerbianCyrillic: number,
            SerbianLatin: number,
            Slovak: number,
            Slovenian: number,
            SpanishArgentina: number,
            SpanishBolivia: number,
            SpanishChile: number,
            SpanishColombia: number,
            SpanishCostaRica: number,
            SpanishDominicanRepublic: number,
            SpanishEcuador: number,
            SpanishElSalvador: number,
            SpanishGuatemala: number,
            SpanishHonduras: number,
            SpanishMexico: number,
            SpanishNicaragua: number,
            SpanishPanama: number,
            SpanishParaguay: number,
            SpanishPeru: number,
            SpanishPuertoRico: number,
            SpanishSpain: number,
            SpanishUruguay: number,
            SpanishVenezuela: number,
            Swahili: number,
            Swedish: number,
            SwedishFinland: number,
            Syriac: number,
            Tamil: number,
            Tatar: number,
            Telugu: number,
            ThaiThailand: number,
            Turkish: number,
            Ukrainian: number,
            UrduPakistan: number,
            UzbekCyrillic: number,
            UzbekLatin: number,
            Vietnamese: number
    }
    
    /**
        * Node Types
        */
    export const NodeType: INodeType;
    export type INodeType = {
            /** Specifies no node types. */
            None: number;
    
            /** Specifies any type of SPWeb site. */
            Area: number;
    
            /** Specifies a List item in the Pages list. */
            Page: number;
    
            /** Specifies a Microsoft SharePoint Foundation list (SPList). */
            List: number;
    
            /** Specifies a Microsoft SharePoint Foundation list item (SPListItem). */
            ListItem: number;
    
            /** Specifies a CMS Page Layout. */
            PageLayout: number;
    
            /**  Specifies a navigation heading. */
            Heading: number;
    
            /** Specifies an authored link that references a page. */
            AuthoredLinkToPage: number;
    
            /** Specifies an authored link that references a Web site or area. */
            AuthoredLinkToWeb: number;
    
            /** Specifies a generic authored link. */
            AuthoredLinkPlain: number;
    
            /** Specifies a custom node type that may be useful for extensibility purposes. */
            Custom: number;
    
            /** Represents an error specific to node types. */
            Error: number;
    
            /** Specifies any type of authored link. */
            AuthoredLink: number;
    
            /** Specifies a combination of Area, Page, Heading and AuthoredLink. Navigation uses this value to determine which node types to return by default. */
            Default: number;
    
            /** Specifies all node types, including Area, Page, List, ListItem, PageLayout, Heading, AuthoredLink, and Custom. */
            All: number;
    }
    
    /**
        * Page Types
        */
    export const PageType: IPageType;
    export type IPageType = {
            /** export typeeration whose values specify a page that is the default view for a list. */
            DefaultView: number,
    
            /** export typeeration whose values specify a page suitable for display within a dialog box on a client computer. */
            DialogView: number,
    
            /** export typeeration whose values specify a list form for displaying a list item. */
            DisplayForm: number,
    
            /** export typeeration whose values specify a list form for displaying a list item, suitable for display within a dialog box on a client computer. */
            DisplayFormDialog: number,
    
            /** export typeeration whose values specify a list form for editing a list item. */
            EditForm: number,
    
            /** export typeeration whose values specify a list form for editing a list item, suitable for display within a dialog box on a client computer. */
            EditFormDialog: number,
    
            /** export typeeration whose values specify a page that does not correspond to a list view or a list form. */
            Invalid: number,
    
            /** export typeeration whose values specify a list form for creating a new list item. */
            NewForm: number,
    
            /** export typeeration whose values specify a list form for creating a new list item, suitable for display within a dialog box on a client computer. */
            NewFormDialog: number,
    
            /** export typeeration whose values specify a page that is a list view and is not the default view for a list. */
            NormalView: number,
    
            /** export typeeration whose values specify the total number of valid page types. */
            Page_MAXITEMS: number,
    
            /** export typeeration whose values specify a list form for displaying or editing a list item and represented by a form template (.xsn) file. */
            SolutionForm: number,
    
            /** export typeeration whose values specify a page that is a list view. */
            View: number
    };
    
    
    
    /**
        * Personal Site Capabilities
        */
    export const PersonalSiteCapabilities: IPersonalSiteCapabilities;
    export type IPersonalSiteCapabilities = {
            Education: number,
            Guest: number,
            MyTasksDashboard: number,
            None: number,
            Profile: number,
            Social: number,
            Storage: number
    };
    
    /**
        * Principal Sources
        */
    export const PrincipalSources: IPrincipalSources;
    export type IPrincipalSources = {
            /** Search all principal sources. */
            All: number,
    
            /** Search the current membership provider. */
            MembershipProvider: number,
    
            /** Search no principal sources. */
            None: number,
    
            /** Search the current role provider. */
            RoleProvider: number,
    
            /** Search the user information list. */
            UserInfoList: number,
    
            /** Search active directory. */
            Windows: number
    }
    
    /**
        * Principal Types
        */
    export const PrincipalTypes: IPrincipalTypes;
    export type IPrincipalTypes = {
            /** Return all entity types. */
            All: number,
    
            /** Return distribution list entity types. */
            DistributionList: number,
    
            /** Return no principal types. */
            None: number,
    
            /** Return security group entity types. */
            SecurityGroup: number,
    
            /** Return sharepoint group entity types. */
            SharePointGroup: number,
    
            /** Return user entity types. */
            User: number
    }
    
    /**
        * Relationship Delete Behavior Types
        */
    export const RelationshipDeleteBehaviorType: IRelationshipDeleteBehaviorType;
    export type IRelationshipDeleteBehaviorType = {
            /** No relationship behavior is applied. */
            None: number,
    
            /** Cascade behavior. */
            Cascade: number,
    
            /** Restrict behavior. */
            Restrict: number
    };
    
    /**
        * Render List Data Options
        */
    export const RenderListDataOptions: IRenderListDataOptions;
    export type IRenderListDataOptions = {
            None: number,
            ContextInfo: number,
            ListData: number,
            ListSchema: number,
            MenuView: number,
            ListContentType: number,
            FileSystemItemId: number,
            ClientFormSchema: number,
            QuickLaunch: number,
            Spotlight: number,
            Visualization: number,
            ViewMetadata: number,
            DisableAutoHyperlink: number,
            EnableMediaTAUrls: number,
            ParentInfo: number,
            PageContextInfo: number,
            ClientSideComponentManifest: number
    };
    
    /**
        * Reordering Rule Match Types
        */
    export const ReorderingRuleMatchType: IReorderingRuleMatchType;
    export type IReorderingRuleMatchType = {
            ResultContainsKeyword: number,
            TitleContainsKeyword: number,
            TitleMatchesKeyword: number,
            UrlStartsWith: number,
            UrlExactlyMatches: number,
            ContentTypeIs: number,
            FileExtensionMatches: number,
            ResultHasTag: number,
            ManualCondition: number
    };
    
    /**
        * Role Types
        */
    export const RoleType: IRoleType;
    export type IRoleType = {
            /** Has all rights from other roles, plus rights to manage roles and view usage analysis data. Includes all rights in the WebDesigner role, plus the following: ManageListPermissions, ManageRoles, ManageSubwebs, ViewUsageData. The Administrator role cannot be customized or deleted, and must always contain at least one member. Members of the Administrator role always have access to, or can grant themselves access to, any item in the Web site. */
            Administrator: number,
    
            /** Has Reader rights, plus rights to add items, edit items, delete items, manage list permissions, manage personal views, personalize Web Part Pages, and browse directories. Includes all rights in the Reader role, plus the following: AddDelPrivateWebParts, AddListItems, BrowseDirectories, CreatePersonalGroups, DeleteListItems, EditListItems, ManagePersonalViews, UpdatePersonalWebParts. Contributors cannot create new lists or document libraries, but they can add content to existing lists and document libraries. */
            Contributor: number,
    
            /** Has Contributor rights, plus rights to manage lists. Includes all rights in the Contributor role. Editors can create new lists or document libraries. */
            Editor: number,
    
            /** Has limited rights to view pages and specific page elements. This role is used to give users access to a particular page, list, or item in a list, without granting rights to view the entire site. Users cannot be added explicitly to the Guest role; users who are given access to lists or document libraries by way of per-list permissions are added automatically to the Guest role. The Guest role cannot be customized or deleted. */
            Guest: number,
    
            /** export typeeration whose values specify that there are no rights on the Web site. */
            None: number,
    
            /** Has rights to view items, personalize Web parts, use alerts, and create a top-level Web site using Self-Service Site Creation. A reader can only read a site; the reader cannot add content. When a reader creates a site using Self-Service Site Creation, the reader becomes the site owner and a member of the Administrator role for the new site. This does not affect the user's role membership for any other site. Rights included: CreateSSCSite, ViewListItems, ViewPages. */
            Reader: number,
    
            /** Has Contributor rights, plus rights to cancel check out, delete items, manage lists, add and customize pages, define and apply themes and borders, and link style sheets. Includes all rights in the Contributor role, plus the following: AddAndCustomizePages, ApplyStyleSheets, ApplyThemeAndBorder, CancelCheckout, ManageLists.WebDesigners can modify the structure of the site and create new lists or document libraries. */
            WebDesigner: number
    };
    
    /**
        * Status Pri Color
        */
    export const StatusPriColor: IStatusPriColor;
    export interface IStatusPriColor {
            /** Information */
            Blue: string,
    
            /** Success */
            Green: string,
    
            /** Very Important */
            Red: string,
    
            /** Important */
            Yellow: string
    }
    
    /**
        * URL Format Types
        */
    export const UrlFormatType: IUrlFormatType;
    export type IUrlFormatType = {
            /** Hyperlink */
            Hyperlink: number,
    
            /** Image */
            Image: number
    };
    
    /**
        * URL Zones
        */
    export const URLZones: IURLZones;
    export type IURLZones = {
            /** Search the custom zone. */
            Custom: number,
    
            /** Search the default zone. */
            Default: number,
    
            /** Search the extranet zone. */
            Extranet: number,
    
            /** Search the internet zone. */
            Internet: number,
    
            /** Search the intranet zone. */
            Intranet: number
    }
    
    /**
        * User Custom Action Registration Types
        */
    export const UserCustomActionRegistrationType: IUserCustomActionRegistrationType;
    export type IUserCustomActionRegistrationType = {
            /** export typeeration whose values specify that the object association is not specified. */
            None: number,
    
            /** export typeeration whose values specify that the custom action is associated with a list. */
            List: number,
    
            /** export typeeration whose values specify that the custom action is associated with a content type. */
            ContentType: number,
    
            /** export typeeration whose values specify that the custom action is associated with a ProgID. */
            ProgId: number,
    
            /** export typeeration whose values specify that the custom action is associated with a file extension. */
            FileType: number
    };
    
    /**
        * View Types
        */
    export const ViewType: IViewType;
    export type IViewType = {
            /** export typeeration whose values specify a calendar list view type. */
            Calendar: number,
    
            /** export typeeration whose values specify a chart list view type. */
            Chart: number,
    
            /** export typeeration whose values specify a Gantt chart list view type. */
            Gantt: number,
    
            /** export typeeration whose values specify a datasheet list view type. */
            Grid: number,
    
            /** export typeeration whose values specify an HTML list view type. */
            Html: number,
    
            /** export typeeration whose values specify a list view type that displays recurring events. */
            Recurrence: number
    }
    
    
    /**
        * Web Template Types
        */
    export const WebTemplateType: IWebTemplateType;
    export type IWebTemplateType = {
            AcademicLibrary: string,
            App: string,
            AppCatalog: string,
            BasicSearch: string,
            Blog: string,
            BusinessIntelligenceCenter: string,
            CentralAdmin: string,
            Community: string,
            CommunityPortal: string,
            Dev: string,
            DocumentCenter: string,
            eDiscoveryCenter: string,
            EnterpriseSearch: string,
            EnterpriseWiki: string,
            Global: string,
            GroupWorkSite: string,
            Meetings: string,
            MeetingWorkspace: string,
            PerformancePoint: string,
            ProductCatalog: string,
            Profiles: string,
            ProjectSite: string,
            Publishing: string,
            PublishingSite: string,
            RecordsCenter: string,
            SharedServicesAdminSite: string,
            Site: string,
            TeamCollaborationSite: string,
            TenantAdmin: string,
            Wiki: string
    }
}

declare module 'gd-sprest/intellisense/graph' {
    import { Base } from "gd-sprest-def";
    
    /**
        * Graph Collection
        */
    export interface IGraphCollection<T> {
            value: Array<T>;
    }
    
    /**
        * Graph Methods
        */
    export interface IGraphMethods { }
    
    /**
        * Graph Query Properties
        */
    export interface IGraphQueryProps {
            /**
                * Represents a collection of OneDrives and Document Libraries.
                */
            drives(): Base.IBaseExecution<IGraphCollection<IGraphDrive>>;
    
            /**
                * Represents a OneDrive or Document Library.
                * @param id - The drive id.
                */
            drives(id: string): Base.IBaseExecution<IGraphDrive>;
    
            /**
                * Represents a collection of Azure Active Directory (Azure AD) groups.
                * Types: Office 365 Group, Dynamic Group or Security Group
                */
            groups(): Base.IBaseExecution<IGraphCollection<IGraphGroup>>;
    
            /**
                * Represents an Azure Active Directory (Azure AD) group.
                * Types: Office 365 Group, Dynamic Group or Security Group
                * @param id - The group id.
                */
            groups(id: string): Base.IBaseExecution<IGraphGroup>;
    
            /**
                * Represents a collection of Azure AD user accounts.
                */
            users(): Base.IBaseExecution<IGraphCollection<IGraphUser>>;
    
            /**
                * Represents a collection of Azure AD user accounts.
                * @param id - The user id.
                */
            users(id: string): Base.IBaseExecution<IGraphUser>;
    }
    
    /**
        * Graph Result
        */
    export interface IGraphResult { }
    
    /**
        * Graph Query Result
        */
    export interface IGraphQueryResult { }
    
    /**
        * Graph Drive
        */
    export interface IGraphDrive {
            // Identity of the user, device, or application which created the item.
            createdBy?: { user: IGraphUser };
    
            // Date and time of item creation.
            createdDateTime?: string;
    
            // Provide a user-visible description of the drive.
            description?: string;
    
            // Describes the type of drive represented by this resource. OneDrive personal drives will return personal. OneDrive for Business will return business. SharePoint document libraries will return documentLibrary.
            driveType?: string;
    
            // The unique identifier of the drive.
            id?: string;
    
            // The drive items
            items?: () => Base.IBaseExecution<IGraphCollection<IGraphDriveItem>>;
    
            // Identity of the user, device, and application which last modified the item.
            lastModifiedBy?: { user: IGraphUser };
    
            // Date and time the item was last modified.
            lastModifiedDateTime?: string;
    
            // The name of the item.
            name?: string;
    
            // The user account that owns the drive.
            owner?: { user: IGraphUser };
    
            // Information about the drive's storage space quota.
            quota?: IGraphDriveQuota;
    
            // Reference to the root folder.
            root?: () => Base.IBaseExecution<IGraphDriveItem>;
    
            // Collection of common folders available in OneDrive.
            specials?: () => Base.IBaseExecution<IGraphCollection<IGraphDriveItem>>;
    
            // Returns identifiers useful for SharePoint REST compatibility.
            sharepointIds?: IGraphSharePointIds;
    
            // If present, indicates that this is a system-managed drive.
            systemFacet?: any;
    
            // URL that displays the resource in the browser.
            webUrl?: string;
    }
    
    /**
        * Graph Drive Item
        */
    export interface IGraphDriveItem {
    }
    
    /**
        * Graph Drive Quota
        */
    export interface IGraphDriveQuota {
            deleted?: number;
            remaining?: number;
            state?: string;
            total?: number;
            used?: number;
    }
    
    /**
        * Graph Token
        */
    export interface IGraphToken {
            access_token: string;
            expires_on: string;
            resource: string;
            scope: string;
            token_type: string;
    }
    
    /**
        * Graph
        */
    export interface IGraph extends IGraphMethods, IGraphQueryProps, Base.IBaseQuery<IGraphResult, IGraphQueryResult> { }
    
    /**
        * Graph Group
        */
    export interface IGraphGroup {
            // Default is false. Indicates if people external to the organization can send messages to the group.
            allowExternalSenders?: boolean;
    
            // Default is false. Indicates if new members added to the group will be auto-subscribed to receive email notifications. You can set this property in a PATCH request for the group; do not set it in the initial POST request that creates the group.
            autoSubscribeNewMembers?: boolean;
    
            // Describes a classification for the group (such as low, medium or high business impact). Valid values for this property are defined by creating a ClassificationList setting value, based on the template definition.
            classification?: string;
    
            // Timestamp of when the group was created. The value cannot be modified and is automatically populated when the group is created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Read-only.
            createdDateTime?: string;
    
            // An optional description for the group.
            description?: string;
    
            // The display name for the group. This property is required when a group is created and it cannot be cleared during updates. Supports $filter and $orderby.
            displayName?: string;
    
            // Specifies the type of group to create. Possible values are Unified to create an Office 365 group, or DynamicMembership for dynamic groups.  For all other group types, like security-enabled groups and email-enabled security groups, do not set this property. Supports $filter.
            groupTypes?: Array<string>;
    
            // The unique identifier for the group. Inherited from directoryObject. Key. Not nullable. Read-only.
            id?: string;
    
            // Default value is true. Indicates whether the current user is subscribed to receive email conversations.
            isSubscribedByMail?: boolean;
    
            // The SMTP address for the group, for example, "serviceadmins@contoso.onmicrosoft.com". Read-only. Supports $filter.
            mail?: string;
    
            // Specifies whether the group is mail-enabled. If the securityEnabled property is also true, the group is a mail-enabled security group; otherwise, the group is a Microsoft Exchange distribution group.
            mailEnabled?: boolean;
    
            // The mail alias for the group, unique in the organization. This property must be specified when a group is created. Supports $filter.
            mailNickname?: string;
    
            // Indicates the last time at which the group was synced with the on-premises directory.The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Read-only. Supports $filter.
            onPremisesLastSyncDateTime?: string;
    
            // Contains the on-premises security identifier (SID) for the group that was synchronized from on-premises to the cloud. Read-only.
            onPremisesSecurityIdentifier?: string;
    
            // true if this group is synced from an on-premises directory; false if this group was originally synced from an on-premises directory but is no longer synced; null if this object has never been synced from an on-premises directory (default). Read-only. Supports $filter.
            onPremisesSyncEnabled?: boolean;
    
            // The any operator is required for filter expressions on multi-valued properties. Read-only. Not nullable. Supports $filter.
            proxyAddresses?: Array<string>;
    
            // Timestamp of when the group was last renewed. This cannot be modified directly and is only updated via the renew service action. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Read-only.
            renewedDateTime?: string;
    
            // Specifies whether the group is a security group. If the mailEnabled property is also true, the group is a mail-enabled security group; otherwise it is a security group. Must be false for Office 365 groups. Supports $filter.
            securityEnabled?: boolean;
    
            // Count of posts that the current  user has not seen since his last visit.
            unseenCount?: number;
    
            // Specifies the visibility of an Office 365 group. Possible values are: Private, Public, or empty (which is interpreted as Public).
            visibility?: string;
    }
    
    /**
        * Graph SharePoint IDs
        */
    export interface IGraphSharePointIds {
            // The unique identifier (guid) for the item's list in SharePoint.
            listId?: string;
    
            // An integer identifier for the item within the containing list.
            listItemId?: string;
    
            // The unique identifier (guid) for the item within OneDrive for Business or a SharePoint site.
            listItemUniqueId?: string;
    
            // The unique identifier (guid) for the item's site collection (SPSite).
            siteId?: string;
    
            // The SharePoint URL for the site that contains the item.
            siteUrl?: string;
    
            // The unique identifier (guid) for the item's site (SPWeb).
            webId?: string;
    }
    
    /**
        * Graph User
        */
    export interface IGraphUser {
            // A freeform text entry field for the user to describe themselves.
            aboutMe?: string;
    
            // true if the account is enabled; otherwise, false. This property is required when a user is created. Supports $filter.
            accountEnabled?: boolean;
    
            // The licenses that are assigned to the user.
            assignedLicenses?: Array<string>;
    
            // The plans that are assigned to the user.
            assignedPlans?: Array<string>;
    
            // The birthday of the user. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1,
            birthday?: string;
    
            // The user's phone numbers.
            businessPhones?: Array<string>;
    
            // The city in which the user is located.
            city?: string;
    
            // The company name which the user is associated.
            companyName?: string;
    
            // The country/region in which the user is located; for example, “US” or “UK”.
            country?: string;
    
            // The name for the department in which the user works.
            department?: string;
    
            // The name displayed in the address book for the user.
            displayName?: string;
    
            // The first name of the user.
            givenName?: string;
    
            // The hire date of the user. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time.
            hireDate?: string;
    
            // The unique identifier for the user.
            id?: string;
    
            // The instant message voice over IP (VOIP) session initiation protocol (SIP) addresses for the user.
            imAddresses?: Array<string>;
    
            // A list for the user to describe their interests.
            interests?: Array<string>;
    
            // The user's job title.
            jobTitle?: string;
    
            // The user's email address.
            mail?: string;
    
            // The mail alias for the user.
            mailNickname?: string;
    
            // The user's cellphone number.
            mobilePhone?: string;
    
            // The URL for the user's personal site.
            mySite?: string;
    
            // The user's physical office location.
            officeLocation?: string;
    
            // The postal code for the user's postal address. 
            postalCode?: string;
    
            // The user's language of preference.
            preferredLanguage?: string;
    
            // The preferred name for the user.
            preferredName?: string;
    
            // A list for the user to enumerate their responsibilities.
            responsibilities?: Array<string>;
    
            // A list for the user to enumerate the schools they have attended.
            schools?: Array<string>;
    
            // A list for the user to enumerate their skills.
            skills?: Array<string>;
    
            // The state or province in the user's address.
            state?: string;
    
            // The street address of the user's place of business.
            streetAddress?: string;
    
            // The last name of the user.
            surname?: string;
    
            // A two letter country code (ISO standard 3166). Required for users that will be assigned licenses due to legal requirement to check for availability of services in countries.  Examples include: "US", "JP", and "GB".
            usageLocation?: string;
    
            // The user's principal name.
            userPrincipalName?: string;
    
            // A string value that can be used to classify user types in your directory, such as “Member” and “Guest”.
            userType?: string;
    }
}

declare module 'gd-sprest/intellisense/peoplePicker' {
    import { Base, SP } from "gd-sprest-def";
    import { SPTypes } from "gd-sprest/mapper/types";
    
    /**
        * Entity Data
        */
    export interface IEntityData {
            /** Account Name */
            AccountName?: string;
    
            /** Department. */
            Department?: string;
    
            /** EMail */
            Email?: string;
    
            /** */
            IsAltSecIdPresent?: boolean;
    
            /** Mobile Phone */
            MobilePhone?: string;
    
            /** Object ID */
            ObjectId?: string;
    
            /** Principal Type */
            PrincipalType?: string;
    
            /** SharePoint Group ID */
            SPGroupID?: string;
    
            /** SharePoint User ID */
            SPUserID?: string;
    
            /** Title */
            Title?: string;
    }
    
    /**
        * People Picker Resolve User
        */
    export interface IPeoplePickerResolveUser {
            // The client people picker resolve user results
            ClientPeoplePickerResolveUser: Array<IPeoplePickerUser>;
    }
    
    /**
        * People Picker Search User
        */
    export interface IPeoplePickerSearchUser {
            // The client people picker search user results
            ClientPeoplePickerSearchUser: Array<IPeoplePickerUser>;
    }
    
    /**
        * People Picker User
        */
    export interface IPeoplePickerUser {
            /** Description */
            Description?: string;
    
            /** Display Text */
            DisplayText: string;
    
            /** The user entity data. */
            EntityData?: IEntityData;
    
            /** Entity Type */
            EntityType?: string;
    
            /** Flag to determine if the search user is resolved. */
            IsResolved?: boolean;
    
            /** The search value. */
            Key: string;
    
            /** An array of un-resolved user entities. */
            MultipleMatches?: Array<IEntityData>;
    
            /** Provider Display Name */
            ProviderDisplayName?: string;
    
            /** Provider Name */
            ProviderName?: string;
    }
    
    /**
        * People Picker
        */
    export interface IPeoplePicker extends Base.IBaseExecution {
            /** Method to resolve users.
                * @param query - The people picker query.
             */
            clientPeoplePickerResolveUser(query: SP.UI.ApplicationPages.ClientPeoplePickerQueryParameters): Base.IBaseExecution<IPeoplePickerResolveUser>;
    
            /** Method to search for users.
                * @param query - The people picker query.
             */
            clientPeoplePickerSearchUser(query: SP.UI.ApplicationPages.ClientPeoplePickerQueryParameters): Base.IBaseExecution<IPeoplePickerSearchUser>;
    }
}

declare module 'gd-sprest/intellisense/utility' {
    import { Base, SP } from "gd-sprest-def";
    
    /**
        * Email
        */
    export interface IEmail {
            /** A collection of additional email headers. */
            AdditionalHeaders?: Array<SP.KeyValue>;
    
            /** A string or collection of email addresses to blind carbon copy the email to. */
            BCC?: Array<string>;
    
            /** A value that specifies the body of the email. */
            Body: string;
    
            /** A string or collection of email addresses to carbon copy the email to. */
            CC?: Array<string>;
    
            /** A value that specifies the email address of the sender. */
            From?: string;
    
            /** A string or collection of email addresses to send the email to. */
            To: Array<string>;
    
            /** A value that specifies the email subject. */
            Subject: string;
    }
    
    /**
        * Principal Result
        */
    export interface IPrincipalResult {
            Department?: string;
            DisplayName?: string;
            Email?: string;
            JobTitle?: string;
            LoginName?: string;
            Mobile?: string;
            PrincipalId?: number;
            PrincipalType?: number;
            SIPAddress?: string;
    }
    
    /**
        * Resolve Principal
        */
    export interface IResolvePrincipal {
            /** Specifies whether to add the user to the user information list. */
            addToUserInfoList?: boolean;
    
            /** The display name, email address, or login name of the principal scopes. */
            input: string;
    
            /** Specifies whether only the email address is used when searching for the principal. */
            inputIsEmailOnly?: boolean;
    
            /** Specifies whether the user information list is used. */
            matchUserInfoList?: boolean;
    
            /** The type of the principal. */
            scopes: number;
    
            /** The source of the principal. */
            sources: number;
    }
    
    /**
        * Search Principal
        */
    export interface ISearchPrincipal {
            /** The group name. */
            groupName?: string;
    
            /** The display name, email address, or login name of the principal scopes. */
            input: string;
    
            /** The maximum number of information entries about principals to return. */
            maxCount: number;
    
            /** The type of the principal. */
            scopes?: number;
    
            /** The source of the principal. */
            sources?: number;
    }
    
    /**
        * Utility Results
        */
    export interface ICreateEmailBodyForInvitationResult extends Base.IBaseExecution { CreateEmailBodyForInvitation: string; }
    export interface IGetCurrentUserEmailAddressesResult extends Base.IBaseExecution { GetCurrentUserEmailAddresses: string; }
    export interface IGetAppLicenseDeploymentIdResult extends Base.IBaseExecution { GetAppLicenseDeploymentId: string; }
    export interface IGetAppLicenseInformationResult extends Base.IBaseExecution { GetAppLicenseInformation: string; }
    export interface IGetLowerCaseStringResult extends Base.IBaseExecution { GetLowerCaseString: string; }
    export interface IResolvePrincipalResult extends Base.IBaseExecution { ResolvePrincipalInCurrentContext: IPrincipalResult; }
    export interface ISearchPrincipalsResult extends Base.IBaseExecution { results: Array<IPrincipalResult>; SearchPrincipalsUsingContextWeb: { results: Array<IPrincipalResult>; }; }
    export interface ISendEmailResult extends Base.IBaseExecution { SendEmail: string; }
    
    /**
        * Utility Methods
        */
    export interface IUtilityMethods {
            /**
                * Gets the external (outside the firewall) URL to a document or resource in a site.
                * pageAddress - The URL for the document or resource.
                */
            createEmailBodyForInvitation(pageAddress: string): Base.IBaseExecution<Base.IBaseExecution, ICreateEmailBodyForInvitationResult>;
    
            /**
                * Gets the app license deployment id.
                */
            getAppLicenseDeploymentId(): Base.IBaseExecution<Base.IBaseExecution, IGetAppLicenseDeploymentIdResult>;
    
            /**
                * Gets the app license information.
                */
            getAppLicenseInformation(): Base.IBaseExecution<Base.IBaseExecution, IGetAppLicenseInformationResult>;
    
            /**
                * Returns the current user's email address.
                */
            getCurrentUserEmailAddresses(): Base.IBaseExecution<Base.IBaseExecution, IGetCurrentUserEmailAddressesResult>;
    
            /**
                * Converts the text to a localized string.
                */
            getLocalizedString(sourceValue: string): Base.IBaseExecution;
    
            /**
                * Converts the text to be lower case.
                */
            getLowerCaseString(sourceValue: string, lcid: number): Base.IBaseExecution<Base.IBaseExecution, IGetLowerCaseStringResult>;
    
            /**
                * Need to research
                */
            importAppLicense(url: string): Base.IBaseExecution;
    
            /**
                * Need to research
                */
            isUserLicensedForEntityInContext(url: string): Base.IBaseExecution;
    
            /**
                * Need to research
                */
            localizeWebPartGallery(url: string): Base.IBaseExecution;
    
            /**
                * Need to research
                */
            markDiscussionAsFeatured(url: string): Base.IBaseExecution;
    
            /**
                * Gets information about a principal that matches the specified Search criteria.
                */
            resolvePrincipal(principal: IResolvePrincipal): Base.IBaseExecution<Base.IBaseExecution, IResolvePrincipalResult>;
    
            /**
                * Gets information about the principals that match the specified Search criteria.
                */
            searchPrincipals(principal: ISearchPrincipal): Base.IBaseExecution<Base.IBaseExecution, ISearchPrincipalsResult>;
    
            /**
                * Need to research
                */
            unmarkDiscussionAsFeatured(url: string): Base.IBaseExecution;
    }
    
    /**
        * Utility
        */
    export interface IUtility extends IUtilityMethods, Base.IBaseExecution<IUtility> {
            /**
                * Creates a wiki page.
                * @param listUrl - The relative url to the library.
                * @param content - The html content.
                */
            createWikiPage(pageUrl: string, content?: string): Base.IBaseExecution<SP.File>;
    
            /**
                * Method to send an email.
                * @param email - The email properties.
                */
            sendEmail(email: IEmail): Base.IBaseExecution<Base.IBaseExecution, ISendEmailResult>;
    }
}

declare module 'gd-sprest/utils/types' {
    export * from "gd-sprest/utils/types/base";
    export * from "gd-sprest/utils/types/helper";
    export * from "gd-sprest/utils/types/request";
    export * from "gd-sprest/utils/types/requestType";
    export * from "gd-sprest/utils/types/targetInfo";
    export * from "gd-sprest/utils/types/xhrRequest";
}

declare module 'gd-sprest/utils/types/targetInfo' {
    /**
        * Target Information
        */
    export const TargetInfo: (props: ITargetInfoProps) => ITargetInfo;
    
    /**
        * Target Information
        */
    export interface ITargetInfo {
            // The target information properties
            props: ITargetInfoProps;
    
            // Flag to determine if this is a batch request
            isBatchRequest: boolean;
    
            // Flag to determine if this is a graph request
            isGraph: boolean;
    
            // The request data
            requestData: any;
    
            // The request header
            requestHeaders: object;
    
            // The request method
            requestMethod: string;
    
            // The request type
            requestType: number;
    
            // The request url
            requestUrl: string;
    }
    
    /**
        * Target Information Properties
        */
    export interface ITargetInfoProps {
            /** The access token for the graph api request. */
            accessToken?: string;
    
            /** True if the expected request returns an array buffer. */
            bufferFl?: boolean;
    
            /** The method to execute after the asynchronous request executes. */
            callback?: () => void;
    
            /** The data to be passed in the body of the request. */
            data?: any;
    
            /** True to default the request to the web api, site api otherwise. */
            defaultToWebFl?: boolean;
    
            /** The endpoint of the request. */
            endpoint?: string;
    
            /** The method to execute. */
            method?: string;
    
            /** True to override the default request to host flag. */
            overrideDefaultRequestToHostFl?: boolean;
    
            /** The request digest to use for the request. */
            requestDigest?: string;
    
            /** The request header. */
            requestHeader?: object;
    
            /** The request information. */
            requestInfo?: object;
    
            /** The request type. */
            requestType?: number;
    
            /** The url of the site/web to execute the request against. */
            url?: string;
    }
}

declare module 'gd-sprest/utils/types/base' {
    import { Base } from "gd-sprest-def";
    import { ITargetInfo, ITargetInfoProps } from "gd-sprest/utils/types/targetInfo";
    import { IXHRRequest } from "gd-sprest/utils/types/xhrRequest";
    
    /**
        * Base
        */
    export interface IBase<Type = any, Result = Type, QueryResult = Result> extends Base.IBaseExecution<Result, QueryResult>, Base.IBaseResult {
    
            /** The parent object, which created this object. */
            parent: any;
    
    
            /** The batch requests. */
            batchRequests: Array<Array<{ callback?: any, response?: IBase, targetInfo: ITargetInfo }>>;
    
            /** The index of this object in the responses array. */
            responseIndex: number;
    
            /** The responses. */
            responses: Array<IBase>;
    
            /** The wait flags. */
            waitFlags: Array<boolean>;
    
    
            /** The base object. */
            base: IBase;
    
            /** The request type */
            requestType: number;
    
            /** The request's status. */
            status: number;
    
            /** The target information. */
            targetInfo: ITargetInfoProps;
    
            /** The xml object. */
            xml: string | XMLDocument;
    
    
            /** Flag to get all items. */
            getAllItemsFl: boolean;
    
            /** Flag determining if more items exist. */
            nextFl: boolean;
    
            /** The request. */
            xhr: IXHRRequest;
    
            /** Adds methods based on the object type. */
            addMethods(data: any, context?: any);
    
            /** Gets the property as a collection. */
            getCollection(method: string, args?: any);
    
            /** Gets the next set of results. */
            getNextSetOfResults();
    
            /** Gets the property. */
            getProperty(propertyName: string, requestType?: string);
    
            /** Updates the metdata uri. */
            updateMetadataUri(metadata, targetInfo: ITargetInfoProps);
    
            /**
                * Method to wait for the parent requests to complete
                */
            waitForRequestsToComplete(callback: () => void, requestIdx?: number);
    }
}

declare module 'gd-sprest/utils/types/helper' {
    import { Base } from "gd-sprest-def";
    import { IBase } from "gd-sprest/utils/types/base";
    import { ITargetInfoProps } from "gd-sprest/utils/types/targetInfo";
    
    /**
      * Request Helper Methods
      */
    export interface IBaseHelper {
        /** Adds the base methods. */
        addBaseMethods(base: IBase, obj: any);
    
        /** Method to wait for the requests to complete. */
        done(base: IBase, resolve: (value?: any) => void);
    
        /** Method to execute the request. */
        executeMethod(base: IBase, methodName: string, methodConfig: Base.IMethodInfo, args?: any);
    
        /** Gets the property as a collection. */
        getCollection(base: IBase, method: string, args?: any): IBase;
    
        /** Gets the next set of results. */
        getNextSetOfResults(base: IBase): IBase;
    
        /** Gets the property. */
        getProperty(base: IBase, propertyName: string, requestType?: string): IBase;
    
        /** Gets the XHR request information. */
        getRequestInfo(base: IBase): Base.IRequestInfo;
    
        /** Converts the base object to a JSON string. */
        stringify(base: IBase): string;
    
        /** Updates the data collection objects. */
        updateDataCollection(base: IBase, results: Array<IBase>);
    
        /** Updates the metadata. */
        updateMetadata(base, data);
    
        /** Updates the metdata uri. */
        updateMetadataUri(base: IBase, metadata, targetInfo: ITargetInfoProps);
    }
}

declare module 'gd-sprest/utils/types/request' {
    import { IBase } from "gd-sprest/utils/types/base";
    
    /**
      * Request
      */
    export interface IRequest {
        /** Adds methods based on the object type. */
        addMethods(base: IBase, data: any, context?: any);
    
        /** Adds properties based on the object type. */
        addProperties(base: IBase, data: any);
    
        /** Method to execute the request. */
        execute(base: IBase, args: Array<any>): IBase;
    
        /** Method to execute the request. */
        executeRequest(base: IBase, asyncFl: boolean, callback?: (response: any, errorFl: boolean) => void);
    
        /** Parses the xml string and creates a base object. */
        parseXML(xml: string): IBase;
    
        /** Updates the data object. */
        updateDataObject(base: IBase, isBatchRequest: boolean);
    
        /** Validates the data collection results. */
        validateDataCollectionResults(base: IBase): PromiseLike<void>;
    
        /** Method to wait for the parent requests to complete */
        waitForRequestsToComplete(base: IBase, callback: () => void, requestIdx?: number);
    }
}

declare module 'gd-sprest/utils/types/requestType' {
    /**
      * Request Type
      */
    export type IRequestType = {
        // Requests
        Custom: number;
        Delete: number;
        Merge: number;
        OData: number;
    
        // Get Requests
        Get: number;
        GetBuffer: number;
        GetWithArgs: number;
        GetWithArgsInBody: number;
        GetWithArgsInQS: number;
        GetWithArgsInQSAsVar: number;
        GetWithArgsValueOnly: number;
        GetReplace: number;
    
        // Graph Requests
        GraphGet: number;
        GraphPost: number;
    
        // Post Requests
        Post: number;
        PostBodyNoArgs: number;
        PostWithArgs: number;
        PostWithArgsAndData: number;
        PostWithArgsInBody: number;
        PostWithArgsInQS: number;
        PostWithArgsInQSAsVar: number;
        PostWithArgsValueOnly: number;
        PostReplace: number;
        PostReplaceWithData: number;
    }
}

declare module 'gd-sprest/utils/types/xhrRequest' {
    import { ITargetInfo } from "gd-sprest/utils/types/targetInfo";
    
    /**
        * XHR Request
        */
    export const XHRRequest: (asyncFl: boolean, targetInfo: ITargetInfo, callback?: (...args) => void) => IXHRRequest;
    
    /**
        * XHR Request
        */
    export interface IXHRRequest {
            // Flag indicating the request has completed
            completedFl: boolean;
    
            // The response
            response: string;
    
            // The xml http request
            request: XMLHttpRequest;
    
            // The data send in the body of the request
            requestData: any;
    
            // The request headers
            requestHeaders: { [key: string]: string };
    
            // The reqest url
            requestUrl: string;
    
            // The request status
            status: number;
    }
}

